@inherits LayoutComponentBase
@inject IAuthService AuthService
@inject NavigationManager Nav
@inject AuthenticationStateProvider AuthenticationStateProvider

<CascadingAuthenticationState>
    @if (!Nav.Uri.Contains("/login"))
    {
        <SfToolbar CssClass="e-bootstrap5 top-toolbar">
            <ToolbarItems>
                <ToolbarItem PrefixIcon="e-menu" TooltipText="Меню" OnClick="ToggleSidebar" />
                <ToolbarItem PrefixIcon="" Text="">
                    <Template>
                        <a class="navbar-brand" href="/">
                            <img src="images/logo.png" alt="Logo" style="height:40px" class="me-2" />
                        </a>
                    </Template>
                </ToolbarItem>
                <ToolbarItem Align="ItemAlign.Right">
                    <Template>
                        @if (authState?.User?.Identity?.IsAuthenticated == true)
                        {
                            <SfButton CssClass="e-danger" OnClick="Logout">Выйти</SfButton>
                        }
                        else
                        {
                            <SfButton CssClass="e-primary" OnClick="@(() => Nav.NavigateTo("/login"))">Войти</SfButton>
                        }
                    </Template>
                </ToolbarItem>
            </ToolbarItems>
        </SfToolbar>
    }
    <AuthorizeView>
        <Authorized>
            <SfSidebar @ref="sidebar" Type="SidebarType.Push" Width="250px" CssClass="sidebar" MediaQuery="(min-width:768px)">
                <Sidebar />
            </SfSidebar>
        </Authorized>
    </AuthorizeView>

    <div class="content @(Nav.Uri.Contains("/login") ? "login-content" : "p-4")">
        <RedirectToLogin />
        @Body
    </div>

    @if (!Nav.Uri.Contains("/login"))
    {
        <footer class="bg-light text-center py-3">
            &copy; 2025 Госуслуги
        </footer>
    }
</CascadingAuthenticationState>

@code {
    private AuthenticationState? authState;

    protected override async Task OnInitializedAsync()
    {
        authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
    }
    SfSidebar sidebar;

    private async Task Logout()
    {
        await AuthService.LogoutAsync();
    }

    private void ToggleSidebar()
    {
        if (sidebar != null)
        {
            sidebar.IsOpen = !sidebar.IsOpen;
        }
    }
}
