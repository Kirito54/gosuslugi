@inherits LayoutComponentBase
@inject IAuthService AuthService
@inject NavigationManager Nav
@inject AuthenticationStateProvider AuthenticationStateProvider

<CascadingAuthenticationState>
    @if (!Nav.Uri.Contains("/login"))
    {
        <SfToolbar CssClass="e-bootstrap5 top-toolbar">
            <ToolbarItems>
                <ToolbarItem PrefixIcon="" Text="">
                    <Template>
                        <a class="navbar-brand" href="/">
                            <img src="images/logo.png" alt="Logo" style="height:40px" class="me-2" />
                        </a>
                    </Template>
                </ToolbarItem>
                @if (authState?.User?.Identity?.IsAuthenticated == true)
                {
                    <ToolbarItem Text="Menu">
                        <Template>
                            <SfMenu Items="MenuItems" CssClass="e-bootstrap5"></SfMenu>
                        </Template>
                    </ToolbarItem>
                }
                <ToolbarItem Align="ItemAlign.Right">
                    <Template>
                        @if (authState?.User?.Identity?.IsAuthenticated == true)
                        {
                            <SfButton CssClass="e-danger" OnClick="Logout">Выйти</SfButton>
                        }
                        else
                        {
                            <SfButton CssClass="e-primary" OnClick="@(() => Nav.NavigateTo("/login"))">Войти</SfButton>
                        }
                    </Template>
                </ToolbarItem>
            </ToolbarItems>
        </SfToolbar>
    }
</CascadingAuthenticationState>

<div class="content @(Nav.Uri.Contains("/login") ? "login-content" : "p-4")">
    <RedirectToLogin />
    @Body
</div>

@if (!Nav.Uri.Contains("/login"))
{
    <footer class="bg-light text-center py-3">
        &copy; 2025 Госуслуги
    </footer>
}

@code {
    private AuthenticationState? authState;

    protected override async Task OnInitializedAsync()
    {
        authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
    }
    List<MenuItem> MenuItems = new()
    {
        new MenuItem { Text = "Services", Url = "/services" },
        new MenuItem { Text = "Service Templates", Url = "/service-templates" },
        new MenuItem { Text = "Workflows", Url = "/workflows" },
        new MenuItem { Text = "Applications", Url = "/applications" },
        new MenuItem { Text = "Documents", Url = "/documents/0" },
        new MenuItem { Text = "Templates", Url = "/templates" },
        new MenuItem { Text = "Document Templates", Url = "/document-templates" },
        new MenuItem { Text = "Users", Url = "/users" },
        new MenuItem { Text = "Permission Groups", Url = "/permission-groups" },
        new MenuItem { Text = "Актуальные заявления", Url = "/registry/applications" },
        new MenuItem { Text = "Распоряжения РДЗ", Url = "/registry/rdz-orders" },
        new MenuItem { Text = "Распоряжения РДИ", Url = "/registry/rdi-orders" },
        new MenuItem { Text = "Ответы", Url = "/registry/answers" },
        new MenuItem { Text = "Договоры", Url = "/registry/contracts" },
        new MenuItem { Text = "Акты", Url = "/registry/acts" },
        new MenuItem { Text = "Соглашения", Url = "/registry/agreements" },
        new MenuItem { Text = "Канцелярия", Url = "/registry/clerical" },
        new MenuItem { Text = "AI Agent", Url = "/agent" }
    };

    private async Task Logout()
    {
        await AuthService.LogoutAsync();
    }
}
