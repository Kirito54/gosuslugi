using System.Reflection;
using Microsoft.AspNetCore.Components;
using Microsoft.AspNetCore.Components.Routing;

namespace Client.Wasm.Services;

public class MenuService
{
    public List<MenuGroup> Groups { get; } = new();

    public MenuService()
    {
        BuildMenu();
    }

    private void BuildMenu()
    {
        var pages = typeof(Program).Assembly
            .GetTypes()
            .Where(t => typeof(ComponentBase).IsAssignableFrom(t))
            .SelectMany(t => t.GetCustomAttributes<RouteAttribute>(), (t, attr) => (Route: attr.Template, Type: t))
            .Distinct()
            .ToList();

        Console.WriteLine($"Found pages: {string.Join(", ", pages.Select(p => p.Route))}");

        var groupStatements = new MenuGroup { Title = "üìÑ –ó–∞—è–≤–ª–µ–Ω–∏—è" };
        AddIfExists(pages, groupStatements.Items, "/applications", "–ó–∞—è–≤–ª–µ–Ω–∏—è");
        AddIfExists(pages, groupStatements.Items, "/registry/applications", "–†–µ–µ—Å—Ç—Ä –∑–∞—è–≤–ª–µ–Ω–∏–π");
        AddIfExists(pages, groupStatements.Items, "/registry/rdz-orders", "–†–∞—Å–ø–æ—Ä—è–∂–µ–Ω–∏—è –†–î–ó");
        AddIfExists(pages, groupStatements.Items, "/registry/rdi-orders", "–†–∞—Å–ø–æ—Ä—è–∂–µ–Ω–∏—è –†–î–ò");
        if (groupStatements.Items.Count > 0) Groups.Add(groupStatements);

        var groupDocs = new MenuGroup { Title = "üìë –î–æ–∫—É–º–µ–Ω—Ç—ã" };
        AddIfExists(pages, groupDocs.Items, "/registry/contracts", "–î–æ–≥–æ–≤–æ—Ä—ã");
        AddIfExists(pages, groupDocs.Items, "/registry/acts", "–ê–∫—Ç—ã");
        AddIfExists(pages, groupDocs.Items, "/registry/agreements", "–°–æ–≥–ª–∞—à–µ–Ω–∏—è");
        AddIfExists(pages, groupDocs.Items, "/registry/answers", "–û—Ç–≤–µ—Ç—ã");
        if (groupDocs.Items.Count > 0) Groups.Add(groupDocs);

        var groupUsers = new MenuGroup { Title = "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏" };
        AddIfExists(pages, groupUsers.Items, "/users", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏");
        if (groupUsers.Items.Count > 0) Groups.Add(groupUsers);

        var groupStructure = new MenuGroup { Title = "üè¢ –°—Ç—Ä—É–∫—Ç—É—Ä–∞" };
        AddIfExists(pages, groupStructure.Items, "/departments", "–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è");
        AddIfExists(pages, groupStructure.Items, "/positions", "–î–æ–ª–∂–Ω–æ—Å—Ç–∏");
        if (groupStructure.Items.Count > 0) Groups.Add(groupStructure);

        var groupRights = new MenuGroup { Title = "üîê –ü—Ä–∞–≤–∞" };
        AddIfExists(pages, groupRights.Items, "/permissions", "–ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞");
        AddIfExists(pages, groupRights.Items, "/permission-groups", "–ì—Ä—É–ø–ø—ã –ø—Ä–∞–≤");
        if (groupRights.Items.Count > 0) Groups.Add(groupRights);

        var groupSettings = new MenuGroup { Title = "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏" };
        AddIfExists(pages, groupSettings.Items, "/services", "–°–µ—Ä–≤–∏—Å—ã");
        AddIfExists(pages, groupSettings.Items, "/service-templates", "–®–∞–±–ª–æ–Ω—ã —É—Å–ª—É–≥");
        AddIfExists(pages, groupSettings.Items, "/workflows", "–†–∞–±–æ—á–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã");
        AddIfExists(pages, groupSettings.Items, "/document-templates", "–®–∞–±–ª–æ–Ω—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤");
        AddIfExists(pages, groupSettings.Items, "/number-templates", "–®–∞–±–ª–æ–Ω—ã –Ω–æ–º–µ—Ä–æ–≤");
        AddIfExists(pages, groupSettings.Items, "/dictionaries", "–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏");
        if (groupSettings.Items.Count > 0) Groups.Add(groupSettings);

        var groupReports = new MenuGroup { Title = "üìä –û—Ç—á—ë—Ç—ã" };
        AddIfExists(pages, groupReports.Items, "/dashboard", "–û–±—â–∏–π –¥–∞—à–±–æ—Ä–¥");
        AddIfExists(pages, groupReports.Items, "/dashboard/specialist", "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç");
        AddIfExists(pages, groupReports.Items, "/dashboard/department", "–û—Ç–¥–µ–ª");
        AddIfExists(pages, groupReports.Items, "/dashboard/management", "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ");
        AddIfExists(pages, groupReports.Items, "/dashboard/director", "–î–∏—Ä–µ–∫—Ç–æ—Ä");
        if (groupReports.Items.Count > 0) Groups.Add(groupReports);

        var groupAi = new MenuGroup { Title = "AI" };
        AddIfExists(pages, groupAi.Items, "/agent", "AI Agent");
        if (groupAi.Items.Count > 0) Groups.Add(groupAi);

        Console.WriteLine($"Created menu: {string.Join(" | ", Groups.Select(g => g.Title + ":" + string.Join(',', g.Items.Select(i => i.Title)) ))}");

        var missing = pages.Where(p => !Groups.SelectMany(g => g.Items).Any(i => i.Url == p.Route) && !p.Route.Contains("{")).Select(p => p.Route).ToList();
        if (missing.Any())
        {
            Console.WriteLine($"Warning: pages not added to menu: {string.Join(", ", missing)}");
        }

        if (Groups.Count == 0)
        {
            Groups.Add(new MenuGroup
            {
                Title = "–ó–∞—è–≤–ª–µ–Ω–∏—è",
                Items = new List<MenuItem>
                {
                    new() { Title = "–°–ø–∏—Å–æ–∫ –∑–∞—è–≤–ª–µ–Ω–∏–π", Url = "/applications" }
                }
            });
            Groups.Add(new MenuGroup
            {
                Title = "–î–æ–∫—É–º–µ–Ω—Ç—ã",
                Items = new List<MenuItem>
                {
                    new() { Title = "–°–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤", Url = "/documents" }
                }
            });
            Groups.Add(new MenuGroup
            {
                Title = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏",
                Items = new List<MenuItem>
                {
                    new() { Title = "–û–±—â–∏–µ", Url = "/settings" }
                }
            });
        }
    }

    private static void AddIfExists(List<(string Route, Type Type)> pages, List<MenuItem> items, string route, string title)
    {
        if (pages.Any(p => p.Route == route))
        {
            items.Add(new MenuItem { Title = title, Url = route });
        }
        else
        {
            Console.WriteLine($"Warning: menu link '{title}' -> '{route}' not found");
        }
    }

    public class MenuGroup
    {
        public string Title { get; set; } = string.Empty;
        public List<MenuItem> Items { get; set; } = new();
    }

    public class MenuItem
    {
        public string Title { get; set; } = string.Empty;
        public string Url { get; set; } = string.Empty;
    }
}
