@inject NavigationManager Nav
@inject IAuthService AuthService
@inject MenuService Menu
@using Microsoft.AspNetCore.Authorization
@using System.Reflection
@using System.Security.Claims
@using System.Linq

<AuthorizeView>
    <Authorized>
        <MudAppBar Color="Color.Info">
            <MudToolBar Class="d-flex justify-between align-items-center">

                <div class="left-block">
                    <a href="/" class="d-flex align-items-center text-decoration-none me-4">
                        <span class="h3 mb-0 me-2">üèõÔ∏è</span>
                        <span class="fw-semibold h5 mb-0">–ê–ò–° –ì–£ –î–ò–ó–û</span>
                    </a>
                </div>

                <div class="center-menu d-none d-md-flex">
                    @foreach (var group in Menu.Groups)
                    {
                        var visible = group.Items.Where(CanView).ToList();
                        if (visible.Count == 0)
                            continue;

                        <MudMenu Dense="true" Label="@group.Title" Class="mx-2">
                            @foreach (var item in visible)
                            {
                                <MudMenuItem Href="@item.Url">@item.Title</MudMenuItem>
                            }
                        </MudMenu>
                    }
                </div>

                <div class="right-block d-flex align-items-center">
                    <MudMenu Icon="@Icons.Material.Filled.Menu" Class="d-md-none me-2">
                        @foreach (var group in Menu.Groups)
                        {
                            var visible = group.Items.Where(CanView).ToList();
                            if (visible.Count == 0)
                                continue;

                            <MudText Class="px-2 pt-1" Typo="Typo.subtitle2">@group.Title</MudText>
                            @foreach (var item in visible)
                            {
                                <MudMenuItem Href="@item.Url">@item.Title</MudMenuItem>
                            }
                            @if (group != Menu.Groups.Last())
                            {
                                <MudDivider />
                            }
                        }
                    </MudMenu>

                    <MudMenu Icon="@Icons.Material.Filled.AccountCircle">
                        <MudMenuItem OnClick="Profile">–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è</MudMenuItem>
                        <MudMenuItem OnClick="Logout">–í—ã—Ö–æ–¥</MudMenuItem>
                    </MudMenu>
                </div>
            </MudToolBar>
        </MudAppBar>
    </Authorized>
    <NotAuthorized>
        <MudAppBar Color="Color.Primary">
            <MudToolbar Class="justify-end">
                <MudButton Color="Color.Primary" OnClick="@(() => Nav.NavigateTo("/login"))">–í–æ–π—Ç–∏</MudButton>
            </MudToolbar>
        </MudAppBar>
    </NotAuthorized>
</AuthorizeView>

@code {
    [CascadingParameter] private Task<AuthenticationState> AuthTask { get; set; } = default!;
    private ClaimsPrincipal? _user;

    protected override async Task OnParametersSetAsync()
    {
        var state = await AuthTask;
        _user = state.User;
    }

    private bool CanView(MenuService.MenuItem item)
    {
        if (item.ComponentType == null)
            return true;

        var attr = item.ComponentType.GetCustomAttribute<AuthorizeAttribute>();
        if (attr == null)
            return true;

        if (_user == null || !_user.Identity?.IsAuthenticated == true)
            return false;

        if (_user.IsInRole("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"))
            return true;

        if (!string.IsNullOrWhiteSpace(attr.Roles))
        {
            var roles = attr.Roles.Split(',', StringSplitOptions.RemoveEmptyEntries);
            return roles.Any(r => _user!.IsInRole(r.Trim()));
        }

        return true;
    }

    private async Task Logout()
    {
        await AuthService.LogoutAsync();
        Nav.NavigateTo("/login", true);
    }

    private void Profile() => Nav.NavigateTo("/profile");
}
