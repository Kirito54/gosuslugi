@inject NavigationManager Nav
@inject AuthenticationStateProvider AuthProvider
@inject IAuthService AuthService
@using Syncfusion.Blazor.Navigations

<AuthorizeView>
    <Authorized>
        <SfAppBar CssClass="appbar e-appbar e-light">
            <AppBarContent>
                <div class="container d-flex align-items-center justify-content-between">
                    <a href="/" class="d-flex align-items-center text-decoration-none me-4">
                        <span class="h3 mb-0 me-2">üèõÔ∏è</span>
                        <span class="fw-semibold h5 mb-0">–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏</span>
                    </a>
                    <!-- –û—Å–Ω–æ–≤–Ω–æ–µ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ –º–µ–Ω—é -->
                    <SfMenu Items="@MenuItems"
                             CssClass="bootstrap5 top-nav-menu"
                             Orientation="Syncfusion.Blazor.Navigations.Orientation.Horizontal"
                             ShowItemOnClick="true">
                        <MenuEvents TValue="MenuItem" ItemClicked="OnItemClicked" />
                    </SfMenu>
                    <!-- –ú–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É -->
                    <SfDropDownButton CssClass="e-flat profile-button" IconCss="e-icons e-user" Items="UserItems" ItemSelected="OnUserItemSelected"></SfDropDownButton>
                </div>
            </AppBarContent>
        </SfAppBar>
    </Authorized>
    <NotAuthorized>
        <SfAppBar Color="AppBarColor.Light" CssClass="appbar">
            <AppBarContent>
                <div class="container d-flex justify-content-end align-items-center">
                    <SfButton CssClass="e-primary" OnClick="@(() => Nav.NavigateTo("/login"))">–í–æ–π—Ç–∏</SfButton>
                </div>
            </AppBarContent>
        </SfAppBar>
    </NotAuthorized>
</AuthorizeView>

@code {
    private List<MenuItem> MenuItems = new()
    {
        new MenuItem
        {
            Text = "üìÑ –ó–∞—è–≤–ª–µ–Ω–∏—è",
            Items = new List<MenuItem>
            {
                new MenuItem{ Text = "–í—Å–µ –∑–∞—è–≤–ª–µ–Ω–∏—è", Url = "/applications" },
                new MenuItem{ Text = "–†–µ–µ—Å—Ç—Ä", Url = "/registry/applications" },
                new MenuItem{ Text = "–†–î–ó", Url = "/registry/rdz-orders" },
                new MenuItem{ Text = "–†–î–ò", Url = "/registry/rdi-orders" }
            }
        },
        new MenuItem
        {
            Text = "üìë –î–æ–∫—É–º–µ–Ω—Ç—ã",
            Items = new List<MenuItem>
            {
                new MenuItem{ Text = "–î–æ–≥–æ–≤–æ—Ä—ã", Url = "/registry/contracts" },
                new MenuItem{ Text = "–ê–∫—Ç—ã", Url = "/registry/acts" },
                new MenuItem{ Text = "–°–æ–≥–ª–∞—à–µ–Ω–∏—è", Url = "/registry/agreements" }
            }
        },
        new MenuItem
        {
            Text = "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏ —Ä–æ–ª–∏",
            Items = new List<MenuItem>
            {
                new MenuItem{ Text = "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", Url = "/users" },
                new MenuItem{ Text = "–†–æ–ª–∏ –∏ –¥–æ—Å—Ç—É–ø", Url = "/roles" }
            }
        },
        new MenuItem
        {
            Text = "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
            Items = new List<MenuItem>
            {
                new MenuItem{ Text = "–û–±—â–∏–µ", Url = "/settings" },
                new MenuItem{ Text = "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏", Url = "/settings/integrations" }
            }
        },
        new MenuItem
        {
            Text = "üìä –û—Ç—á—ë—Ç—ã",
            Items = new List<MenuItem>
            {
                new MenuItem{ Text = "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", Url = "/reports/stats" },
                new MenuItem{ Text = "–í—ã–≥—Ä—É–∑–∫–∏", Url = "/reports/export" }
            }
        },
        new MenuItem
        {
            Text = "ü§ñ –ò–ò",
            Items = new List<MenuItem>
            {
                new MenuItem{ Text = "–ú–æ–¥–µ–ª—å –ò–ò", Url = "/ai" },
                new MenuItem{ Text = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ò–ò", Url = "/ai/settings" }
            }
        }
    };

    private List<DropDownMenuItem> UserItems = new()
    {
        new DropDownMenuItem { Text = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è", Id = "profile" },
        new DropDownMenuItem { Text = "–í—ã—Ö–æ–¥", Id = "logout" }
    };

    protected override Task OnInitializedAsync() => Task.CompletedTask;

    private void OnItemClicked(MenuEventArgs<MenuItem> args)
    {
        Console.WriteLine(args.Item.Text);
        if (!string.IsNullOrEmpty(args.Item.Url))
        {
            Nav.NavigateTo(args.Item.Url);
        }
    }

    private async Task OnUserItemSelected(MenuEventArgs<DropDownMenuItem> args)
    {
        switch (args.Item.Id)
        {
            case "logout":
                await AuthService.LogoutAsync();
                Nav.NavigateTo("/login", true);
                break;
            case "profile":
                Nav.NavigateTo("/profile");
                break;
        }
    }
}
