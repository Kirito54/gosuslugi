@inject IDocumentTemplateService TemplateService

<MudDialog @bind-IsVisible="open" MaxWidth="MaxWidth.Large">
    <div class="row">
        <div class="col-9">
            <!-- TODO: заменить на MudBlazor редактор документов -->
        </div>
        <div class="col-3">
            <h5>Поля</h5>
            <ul class="list-unstyled">
                @foreach (var f in Fields)
                {
                    <li class="mb-2"><MudButton Variant="Variant.Text" OnClick="() => InsertField(f)">@f</MudButton></li>
                }
            </ul>
        </div>
    </div>
    <div class="text-right mt-3">
        <MudButton Color="Color.Primary" Class="me-2" OnClick="Save">Сохранить</MudButton>
        <MudButton Variant="Variant.Text" OnClick="Close">Отмена</MudButton>
    </div>
</MudDialog>

@code {
    bool open;
    TemplateDto model = new();
    bool isNew;

    List<string> Fields = new() { "ФИО_Заявителя", "Дата_Регистрации", "Услуга", "ФИО_Представителя", "Тип_Результата" };

    public async Task Show(int? id = null)
    {
        if (id.HasValue)
        {
            model = await TemplateService.GetByIdAsync(id.Value) ?? new TemplateDto();
            isNew = false;
            // TODO: загрузить содержимое шаблона после замены на MudBlazor
        }
        else
        {
            model = new TemplateDto { Type = "Word" };
            isNew = true;
            // TODO: открыть пустой документ после замены на MudBlazor
        }
        open = true;
    }

    void InsertField(string field)
    {
        // TODO: вставить поле после замены на MudBlazor
    }

    async Task Save()
    {
        // TODO: сохранить содержимое после замены на MudBlazor
        open = false;
        if (OnSaved.HasDelegate)
            await OnSaved.InvokeAsync();
    }
    void Close() => open = false;

    [Parameter] public EventCallback OnSaved { get; set; }
}
