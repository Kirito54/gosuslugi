@inject ErrorHandlerService ErrorService
@inject HttpClient Http
@implements IDisposable

@* TODO: заменить на MudBlazor *@
<div></div>

@code {
    // TODO: заменить на MudBlazor
    string? _errorMessage;
    readonly ReportModel _model = new();

    protected override void OnInitialized()
    {
        ErrorService.OnError += Show;
    }

    public void Dispose()
    {
        ErrorService.OnError -= Show;
    }

    private async void Show()
    {
        var ex = ErrorService.GetError();
        if (ex == null) return;
        _errorMessage = ex.Message;
        // TODO: заменить на MudBlazor
        // await dialog!.ShowAsync();
    }

    private async Task SendReport()
    {
        var ex = ErrorService.GetError();
        if (ex == null) return;
        var dto = new {
            message = ex.Message,
            stackTrace = ex.StackTrace,
            userComment = _model.Comment,
            userId = string.Empty
        };
        await Http.PostAsJsonAsync("api/errors/report", dto);
        // TODO: заменить на MudBlazor
        // await dialog!.HideAsync();
    }

    // TODO: заменить на MudBlazor
    // private void Close() => dialog?.HideAsync();

    class ReportModel
    {
        [Required]
        public string? Comment { get; set; }
    }
}
