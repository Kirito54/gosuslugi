@inject ErrorHandlerService ErrorService
@inject HttpClient Http
@implements IDisposable

<MudDialog @bind-Visible="visible" MaxWidth="MaxWidth.Small">
    <DialogContent>
        <MudText Typo="Typo.h6">Произошла ошибка</MudText>
        <MudText Class="mt-2">@_errorMessage</MudText>
        <EditForm Model="_model" OnValidSubmit="SendReport">
            <DataAnnotationsValidator />
            <MudTextField @bind-Value="_model.Comment" Label="Комментарий" Class="w-100 mt-3" />
            <div class="mt-3 text-right">
                <MudButton Type="Submit" Color="Color.Primary" Class="me-2">Отправить</MudButton>
                <MudButton Variant="Variant.Text" OnClick="Close">Закрыть</MudButton>
            </div>
        </EditForm>
    </DialogContent>
</MudDialog>

@code {
    string? _errorMessage;
    readonly ReportModel _model = new();
    bool visible;

    protected override void OnInitialized()
    {
        ErrorService.OnError += Show;
    }

    public void Dispose()
    {
        ErrorService.OnError -= Show;
    }

    private async void Show()
    {
        var ex = ErrorService.GetError();
        if (ex == null) return;
        _errorMessage = ex.Message;
        visible = true;
    }

    private async Task SendReport()
    {
        var ex = ErrorService.GetError();
        if (ex == null) return;
        var dto = new {
            message = ex.Message,
            stackTrace = ex.StackTrace,
            userComment = _model.Comment,
            userId = string.Empty
        };
        await Http.PostAsJsonAsync("api/errors/report", dto);
        visible = false;
    }

    private void Close() => visible = false;

    class ReportModel
    {
        [Required]
        public string? Comment { get; set; }
    }
}
