@attribute [Authorize]
@using Client.Wasm.DTOs
@inject IPositionApiClient ApiClient

<MudDialog @bind-Visible="open" MaxWidth="MaxWidth.Small">
    <DialogContent>
        <MudText Typo="Typo.h6" Class="mb-2">@header</MudText>
        <EditForm Model="model">
            <MudTextField @bind-Value="model.Name" Label="Название" Class="mb-3 w-100" />
            <MudNumericField T="int" @bind-Value="model.DepartmentId" Label="ID отдела" Class="mb-3 w-100" />
            <MudNumericField T="int" @bind-Value="model.StaffLimit" Label="Штат" Class="mb-3 w-100" />
            <div class="text-right mt-3">
                <MudButton Color="Color.Primary" OnClick="Save" Class="me-2">Сохранить</MudButton>
                <MudButton Variant="Variant.Text" OnClick="Hide">Отмена</MudButton>
            </div>
        </EditForm>
    </DialogContent>
</MudDialog>

@code {
    bool open;
    CreatePositionDto model = new();
    string header = string.Empty;
    int editId;

    public void Show(CreatePositionDto dto)
    {
        model = dto;
        header = "Новая должность";
        editId = 0;
        open = true;
    }

    public async void Load(int id, PositionDto dto)
    {
        model = new CreatePositionDto
        {
            Name = dto.Name,
            DepartmentId = dto.DepartmentId,
            StaffLimit = dto.StaffLimit
        };
        header = $"Редактировать должность #{id}";
        editId = id;
        open = true;
    }

    async Task Save()
    {
        if (editId == 0)
        {
            await ApiClient.CreateAsync(model);
        }
        else
        {
            await ApiClient.UpdateAsync(editId, new UpdatePositionDto
            {
                Name = model.Name,
                DepartmentId = model.DepartmentId,
                StaffLimit = model.StaffLimit
            });
        }
        Hide();
        if (OnSaved.HasDelegate)
            await OnSaved.InvokeAsync();
    }

    void Hide() => open = false;

    [Parameter] public EventCallback OnSaved { get; set; }
}
