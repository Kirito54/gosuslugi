@page "/documents/sign/{Id:guid}"
@attribute [Authorize]
@using Client.Wasm.DTOs
@inject IDocumentApiClient ApiClient
@inject IJSRuntime Js
@inject ISnackbar Snackbar

<MudCard Class="p-6 rounded-xl shadow-lg">
    <MudCardHeader>
        <MudText Typo="Typo.h5" Class="mb-4">Подпись документа</MudText>
    </MudCardHeader>
    <MudCardContent>
        @if (pdfData != null)
        {
            <!-- TODO: заменить на MudBlazor PDF viewer -->
            <iframe src="data:application/pdf;base64,@pdfData" style="width:100%;height:600px;" />
        }
        <div class="mt-4 flex justify-end">
            <MudButton Color="Color.Primary" OnClick="Sign">Подписать</MudButton>
        </div>
    </MudCardContent>
</MudCard>

@code {
    [Parameter] public Guid Id { get; set; }
    string? pdfData;

    protected override async Task OnParametersSetAsync()
    {
        pdfData = await ApiClient.GetBase64Async(Id);
    }

    async Task Sign()
    {
        if (pdfData == null) return;
        try
        {
            var signature = await Js.InvokeAsync<string>("signWithCryptoPro", pdfData);
            var dto = new DocumentSignatureDto { DocumentId = Id, SignatureBase64 = signature };
            await ApiClient.UploadSignatureAsync(dto);
            Snackbar.Add("Документ подписан", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add("Ошибка подписи: " + ex.Message, Severity.Error);
        }
    }
}
