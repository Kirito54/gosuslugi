@attribute [Authorize]
@page "/services"
@inject IServiceApiClient ApiClient
@using Client.Wasm.DTOs
@inject IJSRuntime Js
@inject NavigationManager NavigationManager

<MudContainer MaxWidth="MaxWidth.False" Class="p-4">
    <MudCard Class="mb-4">
        <MudCardHeader>
            <MudText Typo="Typo.h5">Услуги</MudText>
        </MudCardHeader>
        <MudCardContent>
            <div class="d-flex mb-3 gap-4 align-items-end">
                <MudTextField @bind-Value="searchString" Placeholder="Поиск" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" />
                <MudSelect T="string" @bind-Value="selectedStatus" Label="Статус" Clearable="true" Dense="true">
                    @foreach (var s in statuses)
                    {
                        <MudSelectItem Value="@s">@s</MudSelectItem>
                    }
                </MudSelect>
                <MudButton Color="Color.Primary" OnClick="OpenNew" StartIcon="@Icons.Material.Filled.Add">Добавить услугу</MudButton>
            </div>
            <MudTable Items="@filteredItems" Hover="true" Dense="true">
                <HeaderContent>
                    <MudTh>ID</MudTh>
                    <MudTh>Название</MudTh>
                    <MudTh>Описание</MudTh>
                    <MudTh>Срок (дней)</MudTh>
                    <MudTh>Дедлайн</MudTh>
                    <MudTh>Статус</MudTh>
                    <MudTh>Создана</MudTh>
                    <MudTh>Обновлена</MudTh>
                    <MudTh Class="text-center"></MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="ID">@context.Id</MudTd>
                    <MudTd DataLabel="Название">@context.Name</MudTd>
                    <MudTd DataLabel="Описание">@context.Description</MudTd>
                    <MudTd DataLabel="Срок (дней)">@context.ExecutionDeadlineDays</MudTd>
                    <MudTd DataLabel="Дедлайн">@context.ExecutionDeadlineDate?.ToShortDateString()</MudTd>
                    <MudTd DataLabel="Статус">@context.Status</MudTd>
                    <MudTd DataLabel="Создана">@context.CreatedAt.ToShortDateString()</MudTd>
                    <MudTd DataLabel="Обновлена">@context.UpdatedAt.ToShortDateString()</MudTd>
                    <MudTd Class="text-center" DataLabel="Действия">
                        <MudIconButton Icon="@Icons.Material.Filled.Edit" OnClick="@(()=> Edit(context.Id))" />
                        <MudIconButton Color="Color.Error" Icon="@Icons.Material.Filled.Delete" OnClick="@(()=> Delete(context.Id))" />
                    </MudTd>
                </RowTemplate>
            </MudTable>
        </MudCardContent>
    </MudCard>

    <ServiceEdit @ref="editDialog" OnSaved="Reload" />
</MudContainer>

@code {
    List<ServiceDto> services = new();
    ServiceEdit editDialog;
    string searchString = string.Empty;
    string selectedStatus;
    IEnumerable<string> statuses => services.Select(s => s.Status).Where(s => !string.IsNullOrEmpty(s)).Distinct().OrderBy(s => s);
    IEnumerable<ServiceDto> filteredItems => services.Where(s =>
            (string.IsNullOrWhiteSpace(searchString) ||
                (!string.IsNullOrEmpty(s.Name) && s.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase)) ||
                (!string.IsNullOrEmpty(s.Description) && s.Description.Contains(searchString, StringComparison.OrdinalIgnoreCase))) &&
            (string.IsNullOrWhiteSpace(selectedStatus) || s.Status == selectedStatus));

    protected override async Task OnInitializedAsync()
    {
        await Reload();
    }

    async Task Reload() => services = await ApiClient.GetAllAsync();

    void OpenNew() => editDialog.Show(new CreateServiceDto());

    void Edit(int id) => editDialog.Load(id);


    async Task Delete(int id)
    {
        if (await Js.InvokeAsync<bool>("confirm", $"Удалить услугу {id}?"))
        {
            await ApiClient.DeleteAsync(id);
            await Reload();
        }
    }
}
