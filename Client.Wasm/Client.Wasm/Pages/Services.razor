@attribute [Authorize]
@page "/services"
@inject IServiceApiClient ApiClient
@using Client.Wasm.DTOs
@inject IJSRuntime Js
@inject NavigationManager NavigationManager

<div class="container p-4">
    <h1>–£—Å–ª—É–≥–∏</h1>
    <button class="btn btn-primary mb-3" @onclick="OpenNew">–î–æ–±–∞–≤–∏—Ç—å —É—Å–ª—É–≥—É</button>
    <table class="table table-striped table-hover">
        <thead>
            <tr>
                <th>ID</th>
                <th>–ù–∞–∑–≤–∞–Ω–∏–µ</th>
                <th>–û–ø–∏—Å–∞–Ω–∏–µ</th>
                <th>–°–æ–∑–¥–∞–Ω–∞</th>
                <th>–û–±–Ω–æ–≤–ª–µ–Ω–∞</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var s in services)
            {
                <tr>
                    <td class="text-center">@s.Id</td>
                    <td>@s.Name</td>
                    <td>@s.Description</td>
                    <td class="text-center">@s.CreatedAt.ToShortDateString()</td>
                    <td class="text-center">@s.UpdatedAt.ToShortDateString()</td>
                    <td class="text-center">
                        <button class="btn btn-outline-secondary btn-sm me-1" @onclick="(() => Edit(s.Id))">‚úé</button>
                        <button class="btn btn-outline-secondary btn-sm" @onclick="(() => Delete(s.Id))">üóë</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <ServiceEdit @ref="editDialog" OnSaved="Reload" />
</div>

@code {
    List<ServiceDto> services;
    string[] toolbarOptions = new[] { "Search" };
    ServiceEdit editDialog;

    protected override async Task OnInitializedAsync()
    {
        await Reload();
    }

    async Task Reload() => services = await ApiClient.GetAllAsync();

    void OpenNew() => editDialog.Show(new CreateServiceDto());

    void Edit(int id) => editDialog.Load(id);

    async Task Delete(int id)
    {
        if (await Js.InvokeAsync<bool>("confirm", $"–£–¥–∞–ª–∏—Ç—å —É—Å–ª—É–≥—É {id}?"))
        {
            await ApiClient.DeleteAsync(id);
            await Reload();
        }
    }
}
