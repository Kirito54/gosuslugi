@attribute [Authorize]
@page "/services"
@inject IServiceApiClient ApiClient
@using Client.Wasm.DTOs
@inject IJSRuntime Js
@inject NavigationManager NavigationManager
@using Syncfusion.Blazor.Grids

<div class="container p-4">
    <SfCard CssClass="mb-4">
        <CardHeader>
            <h1>Услуги</h1>
        </CardHeader>
        <CardContent>
            <SfButton CssClass="e-primary mb-3" OnClick="OpenNew">Добавить услугу</SfButton>
            <SfGrid DataSource="@services" AllowPaging="true" CssClass="e-bootstrap5" Toolbar="@toolbarOptions">
            <GridPageSettings PageSize="10" />
            <GridColumns>
                <GridColumn Field=@nameof(ServiceDto.Id) HeaderText="ID" Width="70" TextAlign="TextAlign.Center" IsPrimaryKey="true" />
            <GridColumn Field=@nameof(ServiceDto.Name) HeaderText="Название" Width="200" />
            <GridColumn Field=@nameof(ServiceDto.Description) HeaderText="Описание" Width="200" />
            <GridColumn Field=@nameof(ServiceDto.ExecutionDeadlineDays) HeaderText="Срок (дней)" Width="120" />
            <GridColumn Field=@nameof(ServiceDto.ExecutionDeadlineDate) HeaderText="Дедлайн" Format="d" Width="120" />
            <GridColumn Field=@nameof(ServiceDto.Status) HeaderText="Статус" Width="120" />
            <GridColumn Field=@nameof(ServiceDto.CreatedAt) HeaderText="Создана" Format="d" Width="120" />
            <GridColumn Field=@nameof(ServiceDto.UpdatedAt) HeaderText="Обновлена" Format="d" Width="120" />
            <GridColumn HeaderText="" Width="120" TextAlign="TextAlign.Center">
                <Template>
                    <SfButton CssClass="e-flat" IconCss="e-icons e-edit" OnClick="@( (MouseEventArgs e) => Edit((context as ServiceDto).Id) )"></SfButton>
                    <SfButton CssClass="e-flat" IconCss="e-icons e-delete" OnClick="@( (MouseEventArgs e) => Delete((context as ServiceDto).Id) )"></SfButton>
                </Template>
            </GridColumn>
            </GridColumns>
        </SfGrid>
        </CardContent>
    </SfCard>

    <ServiceEdit @ref="editDialog" OnSaved="Reload" />
</div>

@code {
    List<ServiceDto> services;
    string[] toolbarOptions = new[] { "Search" };
    ServiceEdit editDialog;

    protected override async Task OnInitializedAsync()
    {
        await Reload();
    }

    async Task Reload() => services = await ApiClient.GetAllAsync();

    void OpenNew() => editDialog.Show(new CreateServiceDto());

    void Edit(int id) => editDialog.Load(id);


    async Task Delete(int id)
    {
        if (await Js.InvokeAsync<bool>("confirm", $"Удалить услугу {id}?"))
        {
            await ApiClient.DeleteAsync(id);
            await Reload();
        }
    }
}
