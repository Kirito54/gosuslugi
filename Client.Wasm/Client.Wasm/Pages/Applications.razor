@attribute [Authorize]
@page "/applications"
@inject IApplicationApiClient ApiClient
@using Client.Wasm.DTOs
@inject IJSRuntime Js
@inject NavigationManager NavigationManager

<MudContainer MaxWidth="MaxWidth.False" Class="p-4">
    <MudCard Class="mb-4">
        <MudCardHeader>
            <MudText Typo="Typo.h5">Заявки</MudText>
        </MudCardHeader>
        <MudCardContent>
            <MudTextField @bind-Value="searchString" Placeholder="Поиск" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" Class="mb-3" />
            <MudButton Color="Color.Primary" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" Class="mb-3" OnClick="OpenNew">Новая заявка</MudButton>
            <MudTable Items="@filteredItems" Hover="true" Dense="true">
                <HeaderContent>
                    <MudTh>ID</MudTh>
                    <MudTh>Номер</MudTh>
                    <MudTh>Услуга</MudTh>
                    <MudTh>Статус</MudTh>
                    <MudTh>Обновлено</MudTh>
                    <MudTh Class="text-center">Действия</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="ID">@context.Id</MudTd>
                    <MudTd DataLabel="Номер">@context.Number</MudTd>
                    <MudTd DataLabel="Услуга">@context.ServiceName</MudTd>
                    <MudTd DataLabel="Статус">@context.Status</MudTd>
                    <MudTd DataLabel="Обновлено">@context.UpdatedAt.ToShortDateString()</MudTd>
                    <MudTd Class="text-center" DataLabel="Действия">
                        <MudIconButton Icon="@Icons.Material.Filled.OpenInNew" OnClick="@(() => Details(context.Id))" />
                        <MudIconButton Icon="@Icons.Material.Filled.Edit" OnClick="@(() => Edit(context.Id))" />
                        <MudIconButton Color="Color.Error" Icon="@Icons.Material.Filled.Delete" OnClick="@(() => Delete(context.Id))" />
                    </MudTd>
                </RowTemplate>
            </MudTable>
        </MudCardContent>
    </MudCard>

    <ApplicationEdit @ref="edit" OnSaved="LoadData" />
</MudContainer>

@code {
    List<ApplicationDto> items = new();
    ApplicationEdit edit;
    string searchString = string.Empty;
    IEnumerable<ApplicationDto> filteredItems => string.IsNullOrWhiteSpace(searchString)
        ? items
        : items.Where(x =>
            (x.Number != null && x.Number.Contains(searchString, StringComparison.OrdinalIgnoreCase)) ||
            (x.ServiceName != null && x.ServiceName.Contains(searchString, StringComparison.OrdinalIgnoreCase)) ||
            (x.Status != null && x.Status.Contains(searchString, StringComparison.OrdinalIgnoreCase)));

    protected override async Task OnInitializedAsync() => await LoadData();
    async Task LoadData() => items = await ApiClient.GetAllAsync();

    void OpenNew() => edit.Show(new CreateApplicationDto());
    void Edit(int id) => edit.Load(id);
    void Details(int id) => NavigationManager.NavigateTo($"/applications/details/{id}");

    async Task Delete(int id)
    {
        if (await Js.InvokeAsync<bool>("confirm", $"Удалить заявку {id}?") )
        {
            await ApiClient.DeleteAsync(id);
            await LoadData();
        }
    }
}
