@attribute [Authorize]
@page "/documents/{ownerId:guid}"
@inject IDocumentApiClient ApiClient
@using Client.Wasm.DTOs
@inject IJSRuntime Js
@inject NavigationManager NavigationManager

<MudContainer Class="p-4">
    <MudCard Class="mb-4">
        <MudCardHeader>
            <MudText Typo="Typo.h6">Документы</MudText>
        </MudCardHeader>
        <MudCardContent>
            <EditForm Model="upload">
                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <MudText Color="Color.Error" Class="mb-2">@errorMessage</MudText>
                }
                <div class="mb-4 d-flex gap-2 align-items-center">
                    <MudSelect T="DocumentType" @bind-Value="upload.Type" Class="w-40" Dense="true">
                        @foreach (var t in types)
                        {
                            <MudSelectItem Value="t">@t</MudSelectItem>
                        }
                    </MudSelect>
                    <InputFile OnChange="OnFileSelected" />
                    <MudButton Color="Color.Primary" Type="Button" OnClick="HandleUpload">Загрузить</MudButton>
                </div>
            </EditForm>

            <MudTable Items="@docs" Dense="true">
                <HeaderContent>
                    <MudTh>Файл</MudTh>
                    <MudTh>Загружен</MudTh>
                    <MudTh></MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Файл">@context.OriginalName</MudTd>
                    <MudTd DataLabel="Загружен">@context.CreatedAt.ToShortDateString()</MudTd>
                    <MudTd>
                        <MudButton Variant="Variant.Text" OnClick="@(() => Download(context.Id))">Скачать</MudButton>
                    </MudTd>
                </RowTemplate>
            </MudTable>
        </MudCardContent>
    </MudCard>
</MudContainer>

@code {
    [Parameter] public Guid ownerId { get; set; }
    List<DocumentDto> docs = new();
    DocumentUploadDto upload = new();
    DocumentType[] types = Enum.GetValues<DocumentType>();
    string? errorMessage;

    protected override async Task OnParametersSetAsync()
    {
        docs = await ApiClient.GetByOwnerAsync(ownerId);
    }

    async Task HandleUpload()
    {
        errorMessage = null;
        if (!Client.Wasm.Helpers.ManualValidator.TryValidate(upload, out var errors))
        {
            errorMessage = string.Join("\n", errors);
            return;
        }
        if (upload.File != null)
        {
            upload.OwnerId = ownerId;
            await ApiClient.UploadAsync(upload);
            upload.File = null;
            docs = await ApiClient.GetByOwnerAsync(ownerId);
        }
    }

    void OnFileSelected(InputFileChangeEventArgs e)
    {
        upload.File = e.File;
    }

    async Task Download(Guid id)
    {
        await Js.InvokeVoidAsync("open", $"api/documents/download/{id}", "_blank");
    }
}
