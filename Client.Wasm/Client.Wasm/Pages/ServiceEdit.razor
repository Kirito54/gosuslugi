@attribute [Authorize]
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Navigations
@using Client.Wasm.DTOs
@inject IJSRuntime Js
@inject NavigationManager NavigationManager
@inject IServiceApiClient ApiClient

<SfDialog @ref="dialog" Width="400px" IsModal="true" ShowCloseIcon="true" Header="@header">
    <EditForm Model="model" OnValidSubmit="HandleSave">
        <DataAnnotationsValidator />
        <SfTab>
            <TabItems>
                <TabItem HeaderText="Основное">
                    <SfTextBox TValue="string" @bind-Value="model.Name" Placeholder="Название" CssClass="mb-3 w-100" />
                    <SfTextBox TValue="string" Multiline="true" @bind-Value="model.Description" Placeholder="Описание" CssClass="mb-3 w-100" Rows="3" />
                </TabItem>
                <TabItem HeaderText="Дополнительно">
                    <!-- дополнительные поля -->
                </TabItem>
            </TabItems>
        </SfTab>
        <div class="text-right mt-3">
            <SfButton CssClass="e-primary me-2" Type="Submit">Сохранить</SfButton>
            <SfButton CssClass="e-flat" OnClick="@( (MouseEventArgs e) => dialog.Hide() )">Отмена</SfButton>
        </div>
    </EditForm>
</SfDialog>

@code {
    SfDialog dialog;
    ServiceDto model = new();
    string header;

    public void Show(CreateServiceDto dto)
    {
        model = new ServiceDto();
        header = "Новая услуга";
        dialog.Show();
    }

    public async void Load(int id)
    {
        model = await ApiClient.GetByIdAsync(id);
        header = $"Редактировать услугу #{id}";
        dialog.Show();
    }

    async Task HandleSave()
    {
        if (model.Id == 0)
            await ApiClient.CreateAsync(new CreateServiceDto { Name = model.Name, Description = model.Description });
        else
            await ApiClient.UpdateAsync(model.Id, new UpdateServiceDto { Name = model.Name, Description = model.Description });
        dialog.Hide();
        if (OnSaved.HasDelegate)
        {
            await OnSaved.InvokeAsync();
        }
    }

    [Parameter] public EventCallback OnSaved { get; set; }
}
