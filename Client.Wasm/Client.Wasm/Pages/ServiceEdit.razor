@attribute [Authorize]
@using Client.Wasm.DTOs
@inject IJSRuntime Js
@inject NavigationManager NavigationManager
@inject IServiceApiClient ApiClient

<MudDialog @bind-Visible="open" MaxWidth="MaxWidth.Small">
    <DialogContent>
        <MudText Typo="Typo.h6" Class="mb-2">@header</MudText>
        <EditForm Model="model">
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <MudText Color="Color.Error" Class="mb-2">@errorMessage</MudText>
            }
            <MudTabs>
                <MudTabPanel Text="Основное">
                    <MudTextField @bind-Value="model.Name" Label="Название" Class="mb-3 w-100" />
                    <MudTextField @bind-Value="model.Description" Label="Описание" Lines="3" Class="mb-3 w-100" />
                    <MudNumericField T="int?" @bind-Value="model.ExecutionDeadlineDays" Label="Срок (дней)" Class="mb-3 w-100" />
                    <MudDatePicker @bind-Date="model.ExecutionDeadlineDate" Label="Точная дата" Class="mb-3 w-100" />
                </MudTabPanel>
            </MudTabs>
            <div class="text-right mt-3">
                <MudButton Type="Button" Color="Color.Primary" Class="me-2" OnClick="HandleSave">Сохранить</MudButton>
                <MudButton Variant="Variant.Text" OnClick="Hide">Отмена</MudButton>
            </div>
        </EditForm>
    </DialogContent>
</MudDialog>

@code {
    bool open;
    ServiceDto model = new();
    string header = string.Empty;
    string? errorMessage;

    public void Show(CreateServiceDto dto)
    {
        model = new ServiceDto
        {
            Name = dto.Name,
            Description = dto.Description,
            ExecutionDeadlineDays = dto.ExecutionDeadlineDays,
            ExecutionDeadlineDate = dto.ExecutionDeadlineDate,
            ExecutionStages = dto.ExecutionStages,
            Status = dto.Status
        };
        header = "Новая услуга";
        open = true;
    }

    public async void Load(int id)
    {
        model = await ApiClient.GetByIdAsync(id);
        header = $"Редактировать услугу #{id}";
        open = true;
    }

    void Hide() => open = false;

    async Task HandleSave()
    {
        errorMessage = null;
        if (!Client.Wasm.Helpers.ManualValidator.TryValidate(model, out var errors))
        {
            errorMessage = string.Join("\n", errors);
            return;
        }
        if (model.Id == 0)
            await ApiClient.CreateAsync(new CreateServiceDto
            {
                Name = model.Name,
                Description = model.Description,
                ExecutionDeadlineDays = model.ExecutionDeadlineDays,
                ExecutionDeadlineDate = model.ExecutionDeadlineDate,
                ExecutionStages = model.ExecutionStages,
                Status = model.Status
            });
        else
            await ApiClient.UpdateAsync(model.Id, new UpdateServiceDto
            {
                Name = model.Name,
                Description = model.Description,
                ExecutionDeadlineDays = model.ExecutionDeadlineDays,
                ExecutionDeadlineDate = model.ExecutionDeadlineDate,
                ExecutionStages = model.ExecutionStages,
                Status = model.Status
            });
        open = false;
        if (OnSaved.HasDelegate)
        {
            await OnSaved.InvokeAsync();
        }
    }

    [Parameter] public EventCallback OnSaved { get; set; }
}
