@attribute [Authorize]
@using Client.Wasm.DTOs
@inject IJSRuntime Js
@inject NavigationManager NavigationManager
@inject IServiceApiClient ApiClient

<SfDialog @ref="dlg" Width="450px" ShowCloseIcon="true" Header="@header">
    <EditForm Model="model" OnValidSubmit="HandleSave">
        <DataAnnotationsValidator />
        <SfTab>
            <TabItems>
                <TabItem>
    <ChildContent>
        <TabHeader Text="Основное"></TabHeader>
    </ChildContent>
    <ContentTemplate>
                    <SfTextBox TValue="string" @bind-Value="model.Name" Placeholder="Название" CssClass="mb-3 w-100" />
                    <SfTextBox TValue="string" Multiline="true" @bind-Value="model.Description" Placeholder="Описание" CssClass="mb-3 w-100" Rows="3" />
                    <SfNumericTextBox TValue="int?" @bind-Value="model.ExecutionDeadlineDays" Placeholder="Срок (дней)" CssClass="mb-3 w-100" />
                    <SfDatePicker TValue="DateTime?" @bind-Value="model.ExecutionDeadlineDate" Placeholder="Точная дата" CssClass="mb-3 w-100" />
                </ContentTemplate>
</TabItem>
            </TabItems>
        </SfTab>
        <div class="text-right mt-3">
            <SfButton Type="Submit" CssClass="e-primary me-2">Сохранить</SfButton>
            <SfButton CssClass="e-flat" OnClick="Hide">Отмена</SfButton>
        </div>
    </EditForm>
</SfDialog>

@code {
    SfDialog dlg;
    ServiceDto model = new();
    string header = string.Empty;

    public void Show(CreateServiceDto dto)
    {
        model = new ServiceDto
        {
            Name = dto.Name,
            Description = dto.Description,
            ExecutionDeadlineDays = dto.ExecutionDeadlineDays,
            ExecutionDeadlineDate = dto.ExecutionDeadlineDate,
            ExecutionStages = dto.ExecutionStages,
            Status = dto.Status
        };
        header = "Новая услуга";
        _ = dlg.ShowAsync();
    }

    public async void Load(int id)
    {
        model = await ApiClient.GetByIdAsync(id);
        header = $"Редактировать услугу #{id}";
        _ = dlg.ShowAsync();
    }

    Task Hide() => dlg.HideAsync();

    async Task HandleSave()
    {
        if (model.Id == 0)
            await ApiClient.CreateAsync(new CreateServiceDto
            {
                Name = model.Name,
                Description = model.Description,
                ExecutionDeadlineDays = model.ExecutionDeadlineDays,
                ExecutionDeadlineDate = model.ExecutionDeadlineDate,
                ExecutionStages = model.ExecutionStages,
                Status = model.Status
            });
        else
            await ApiClient.UpdateAsync(model.Id, new UpdateServiceDto
            {
                Name = model.Name,
                Description = model.Description,
                ExecutionDeadlineDays = model.ExecutionDeadlineDays,
                ExecutionDeadlineDate = model.ExecutionDeadlineDate,
                ExecutionStages = model.ExecutionStages,
                Status = model.Status
            });
        await dlg.HideAsync();
        if (OnSaved.HasDelegate)
        {
            await OnSaved.InvokeAsync();
        }
    }

    [Parameter] public EventCallback OnSaved { get; set; }
}
