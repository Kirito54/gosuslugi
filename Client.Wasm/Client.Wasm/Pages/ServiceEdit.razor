@attribute [Authorize]
@using Client.Wasm.DTOs
@inject IJSRuntime Js
@inject NavigationManager NavigationManager
@inject IServiceApiClient ApiClient

@if (visible)
{
    <div class="modal show d-block" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@header</h5>
                    <button type="button" class="btn-close" @onclick="Hide"></button>
                </div>
                <EditForm Model="model" OnValidSubmit="HandleSave">
                    <DataAnnotationsValidator />
                    <ul class="nav nav-tabs">
                        <li class="nav-item">
                            <a class="nav-link active" data-bs-toggle="tab" href="#tab1">Основное</a>
                        </li>
                    </ul>
                    <div class="tab-content p-4 border border-top-0 rounded-bottom">
                        <div class="tab-pane fade show active" id="tab1">
                            <InputText class="form-control mb-3" @bind-Value="model.Name" placeholder="Название" />
                            <InputTextArea class="form-control mb-3" @bind-Value="model.Description" placeholder="Описание" rows="3" />
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-primary me-2" type="submit">Сохранить</button>
                        <button type="button" class="btn btn-outline-secondary" @onclick="Hide">Отмена</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    bool visible;
    ServiceDto model = new();
    string header = string.Empty;

    public void Show(CreateServiceDto dto)
    {
        model = new ServiceDto();
        header = "Новая услуга";
        visible = true;
    }

    public async void Load(int id)
    {
        model = await ApiClient.GetByIdAsync(id);
        header = $"Редактировать услугу #{id}";
        visible = true;
    }

    void Hide() => visible = false;

    async Task HandleSave()
    {
        if (model.Id == 0)
            await ApiClient.CreateAsync(new CreateServiceDto { Name = model.Name, Description = model.Description });
        else
            await ApiClient.UpdateAsync(model.Id, new UpdateServiceDto { Name = model.Name, Description = model.Description });
        visible = false;
        if (OnSaved.HasDelegate)
        {
            await OnSaved.InvokeAsync();
        }
    }

    [Parameter] public EventCallback OnSaved { get; set; }
}
