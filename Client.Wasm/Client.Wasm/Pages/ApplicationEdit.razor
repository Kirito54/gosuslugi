@attribute [Authorize]
@using Client.Wasm.DTOs
@inject IJSRuntime Js
@inject NavigationManager NavigationManager
@inject IApplicationApiClient ApiClient

<MudDialog @bind-Visible="open" MaxWidth="MaxWidth.Small">
    <DialogContent>
        <MudText Typo="Typo.h6" Class="mb-2">@header</MudText>
        <EditForm Model="model" OnValidSubmit="Save">
            <DataAnnotationsValidator />
            <MudTabs>
                <MudTabPanel Text="Основное">
                    <MudNumericField T="int" @bind-Value="model.ServiceId" Label="ID услуги" Class="mb-3 w-100" />
                    <MudTextField Lines="4" @bind-Value="formData" Label="Данные формы (JSON)" Class="mb-3 w-100" />
                </MudTabPanel>
                <MudTabPanel Text="Дополнительно">
                    <!-- дополнительные поля -->
                </MudTabPanel>
            </MudTabs>
            <div class="text-right mt-3">
                <MudButton Type="Submit" Color="Color.Primary" Class="me-2">Сохранить</MudButton>
                <MudButton Variant="Variant.Text" OnClick="Hide">Отмена</MudButton>
            </div>
        </EditForm>
    </DialogContent>
</MudDialog>

@code {
    bool open;
    CreateApplicationDto model = new();
    UpdateApplicationDto updateModel = new();
    bool isNew;
    string header;
    string formData = "{}";
    int editId;

    public void Show(CreateApplicationDto dto)
    {
        model = new CreateApplicationDto();
        formData = "{}";
        header = "Новая заявка";
        isNew = true;
        open = true;
    }

    public async void Load(int id)
    {
        var app = await ApiClient.GetByIdAsync(id);
        editId = id;
        updateModel = new UpdateApplicationDto { CurrentStepId = app.CurrentStepId, Status = app.Status, AssignedToUserId = app.AssignedToUserId };
        header = $"Редактировать заявку #{id}";
        isNew = false;
        open = true;
    }

    async Task Save()
    {
        if (isNew)
            await ApiClient.CreateAsync(new CreateApplicationDto { ServiceId = model.ServiceId, FormData = new Dictionary<string, object>() });
        else
            await ApiClient.UpdateAsync(editId, updateModel);
        Hide();
        if (OnSaved.HasDelegate)
        {
            await OnSaved.InvokeAsync();
        }
    }

    void Hide() => open = false;

    [Parameter] public EventCallback OnSaved { get; set; }
}
