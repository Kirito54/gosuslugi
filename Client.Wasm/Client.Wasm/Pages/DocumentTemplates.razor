@attribute [Authorize(Roles="Администратор")]
@page "/document-templates"
@inject IDocumentTemplateService TemplateService
@inject IJSRuntime JsRuntime
@inject ISnackbar Snackbar
<RedirectToLogin />

<MudContainer Class="mt-4">
    <MudCard Class="mb-4">
        <MudCardHeader>
            <MudText Typo="Typo.h5">Шаблоны документов</MudText>
        </MudCardHeader>
        <MudCardContent>
            <div class="d-flex mb-3 gap-4 align-items-end">
                <MudTextField @bind-Value="searchString" Placeholder="Поиск" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" />
                <MudButton Color="Color.Primary" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" OnClick="@(() => editor.Show())">Новый шаблон</MudButton>
            </div>
            <MudTable Items="@filteredItems" Hover="true" Dense="true">
                <HeaderContent>
                    <MudTh>ID</MudTh>
                    <MudTh>Название</MudTh>
                    <MudTh Class="text-center">Действия</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="ID">@context.Id</MudTd>
                    <MudTd DataLabel="Название">@context.Name</MudTd>
                    <MudTd DataLabel="Действия" Class="text-center">
                        <MudIconButton Icon="@Icons.Material.Filled.Edit" OnClick="@(() => editor.Show(context.Id))" />
                        <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="@(() => Delete(context.Id))" />
                    </MudTd>
                </RowTemplate>
            </MudTable>
        </MudCardContent>
    </MudCard>

    <DocumentTemplateEditor @ref="editor" OnSaved="Load" />
</MudContainer>

@code {
    List<TemplateDto> items = new();
    DocumentTemplateEditor editor;
    string searchString = string.Empty;
    IEnumerable<TemplateDto> filteredItems => items.Where(t => string.IsNullOrWhiteSpace(searchString) ||
        (!string.IsNullOrEmpty(t.Name) && t.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase)));

    protected override async Task OnInitializedAsync() => await Load();

    async Task Load() => items = await TemplateService.GetAllAsync();

    async Task Delete(int id)
    {
        if (!await JsRuntime.InvokeAsync<bool>("confirm", $"Удалить шаблон {id}?") )
            return;
        try
        {
            await TemplateService.DeleteAsync(id);
            Snackbar.Add("Шаблон удалён", Severity.Success);
            await Load();
        }
        catch (Exception ex)
        {
            Snackbar.Add("Ошибка удаления: " + ex.Message, Severity.Error);
        }
    }
}
