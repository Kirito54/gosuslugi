@attribute [Authorize]
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Navigations
@using Client.Wasm.DTOs
@inject IJSRuntime Js
@inject NavigationManager NavigationManager
@inject ITemplateApiClient ApiClient

<SfDialog @ref="dlg" Width="450px" ShowCloseIcon="true" Header="@hdr">
    <EditForm Model="model" OnValidSubmit="Save">
        <DataAnnotationsValidator />
        <SfTab>
            <TabItems>
                <TabItem HeaderText="Основное">
                    <SfTextBox TValue="string" @bind-Value="model.Name" Placeholder="Название" CssClass="mb-3 w-100" />
                    <SfTextBox TValue="string" @bind-Value="model.Type" Placeholder="Тип" CssClass="mb-3 w-100" />
                    <InputTextArea @bind-Value="model.Content" class="form-control mb-3" rows="6" placeholder="Содержимое" />
                </TabItem>
                <TabItem HeaderText="Дополнительно">
                    <!-- дополнительные поля -->
                </TabItem>
            </TabItems>
        </SfTab>
        <div class="text-right mt-3">
            <SfButton Type="Submit" CssClass="e-primary me-2">Сохранить</SfButton>
            <SfButton CssClass="e-flat" OnClick="@( (MouseEventArgs e) => dlg.HideAsync() )">Отмена</SfButton>
        </div>
    </EditForm>
</SfDialog>

@code {
    SfDialog dlg;
    TemplateDto model = new();
    bool isNew;
    int editId;
    string hdr;

    public void Show(CreateTemplateDto dto)
    {
        model = new TemplateDto();
        hdr = "Новый шаблон";
        isNew = true;
        _ = dlg.ShowAsync();
    }

    public async void Load(int id)
    {
        var t = await ApiClient.GetByIdAsync(id);
        model = new TemplateDto { Id = t.Id, Name = t.Name, Type = t.Type, Content = t.Content };
        editId = id;
        hdr = $"Редактировать шаблон #{id}";
        isNew = false;
        _ = dlg.ShowAsync();
    }

    async Task Save()
    {
        if (isNew)
            await ApiClient.CreateAsync(new CreateTemplateDto { Name = model.Name, Type = model.Type, Content = model.Content });
        else
            await ApiClient.UpdateAsync(editId, new UpdateTemplateDto { Name = model.Name, Type = model.Type, Content = model.Content });
        _ = dlg.HideAsync();
        if (OnSaved.HasDelegate)
        {
            await OnSaved.InvokeAsync();
        }
    }

    [Parameter] public EventCallback OnSaved { get; set; }
}
