@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Navigations
@using Client.Wasm.DTOs
@inject IJSRuntime Js
@inject NavigationManager NavigationManager
@inject ITemplateApiClient ApiClient

<SfDialog @ref="dlg" Width="450px" ShowCloseIcon="true" Header="@hdr">
    <EditForm Model="model" OnValidSubmit="Save">
        <DataAnnotationsValidator />
        <SfTextBox TValue="string" @bind-Value="@(((dynamic)model).Name)" Placeholder="Название" CssClass="mb-3 w-100" />
        <SfTextBox TValue="string" @bind-Value="@(((dynamic)model).Type)" Placeholder="Тип" CssClass="mb-3 w-100" />
        <SfTextBox TValue="string" Multiline="true" @bind-Value="@(((dynamic)model).Content)" Placeholder="Содержимое" CssClass="mb-3 w-100" Rows="6" />
        <div class="text-right">
            <SfButton Type="Submit" CssClass="e-primary me-2">Сохранить</SfButton>
            <SfButton CssClass="e-flat" OnClick="()=>dlg.Hide()">Отмена</SfButton>
        </div>
    </EditForm>
</SfDialog>

@code {
    SfDialog dlg;
    dynamic model;
    CreateTemplateDto createModel = new();
    UpdateTemplateDto updateModel = new();
    bool isNew;
    int editId;
    string hdr;

    public void Show(CreateTemplateDto dto)
    {
        createModel = new CreateTemplateDto();
        model = createModel;
        hdr = "Новый шаблон";
        isNew = true;
        dlg.Show();
    }

    public async void Load(int id)
    {
        var t = await ApiClient.GetByIdAsync(id);
        updateModel = new UpdateTemplateDto { Name = t.Name, Type = t.Type, Content = t.Content };
        model = updateModel;
        editId = id;
        hdr = $"Редактировать шаблон #{id}";
        isNew = false;
        dlg.Show();
    }

    async Task Save()
    {
        if (isNew)
            await ApiClient.CreateAsync(createModel);
        else
            await ApiClient.UpdateAsync(editId, updateModel);
        dlg.Hide();
        if (OnSaved.HasDelegate)
        {
            await OnSaved.InvokeAsync();
        }
    }

    [Parameter] public EventCallback OnSaved { get; set; }
}
