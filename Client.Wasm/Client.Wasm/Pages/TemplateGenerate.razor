@attribute [Authorize]
@using Client.Wasm.DTOs
@inject ITemplateApiClient ApiClient
@inject ISnackbar Snackbar
<RedirectToLogin />

<MudDialog @bind-Visible="dialogVisible" MaxWidth="MaxWidth.Small">
    <DialogContent>
        <MudText Typo="Typo.h6" Class="mb-2">Генерация документа</MudText>
        <EditForm Model="model">
            <MudTextField @bind-Value="model.ApplicantName" Label="Заявитель" Class="mb-3 w-100" />
            <MudTextField @bind-Value="model.ServiceName" Label="Услуга" Class="mb-3 w-100" />
            <MudTextField @bind-Value="model.StepName" Label="Этап" Class="mb-3 w-100" />
            <MudDatePicker @bind-Date="model.Date" Label="Дата" Class="mb-3 w-100" />
            <div class="text-right">
                <MudButton OnClick="Generate" Color="Color.Primary" Class="me-2">Создать</MudButton>
                <MudButton Variant="Variant.Text" OnClick="Hide">Отмена</MudButton>
            </div>
        </EditForm>
    </DialogContent>
</MudDialog>

@code {
    bool dialogVisible;
    TemplateModel model = new();
    int templateId;

    public void Show(int id)
    {
        templateId = id;
        model = new TemplateModel { Date = DateTime.Today };
        dialogVisible = true;
    }

    void Hide() => dialogVisible = false;

    async Task Generate()
    {
        try
        {
            var bytes = await ApiClient.GeneratePdfAsync(templateId, model);
            // здесь могла бы быть логика скачивания файла
            Snackbar.Add("Документ создан", Severity.Success);
            dialogVisible = false;
        }
        catch (Exception ex)
        {
            Snackbar.Add("Ошибка генерации: " + ex.Message, Severity.Error);
        }
    }
}
