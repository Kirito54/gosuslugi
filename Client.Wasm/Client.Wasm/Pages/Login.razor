@page "/login"
@inject Client.Wasm.Services.AuthService AuthService
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthProvider

<div class="login-wrapper">
    <SfCard CssClass="login-card glass-effect">
        <CardHeader>
            <div class="text-center mb-3">
                <img src="images/logo.png" class="login-logo" alt="Логотип" />
                <h4 class="login-title">ГУ ДИЗО</h4>
            </div>
        </CardHeader>

        <CardContent>
            <EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <SfTextBox @bind-Value="loginModel.Email" Placeholder="Эл. почта" CssClass="form-field" />
                <SfTextBox @bind-Value="loginModel.Password" Placeholder="Пароль" Type="InputType.Password" CssClass="form-field" />

                <SfButton CssClass="login-button e-primary" Type="Submit">Войти</SfButton>
            </EditForm>
        </CardContent>

        <CardFooter>
            <div class="text-center mt-3">
                <a href="#" class="text-light">Забыли пароль?</a>
                <div class="text-muted mt-2">© 2025 ГУ ДИЗО</div>
            </div>
        </CardFooter>
    </SfCard>
</div>

@code {
    LoginModel loginModel = new();

    protected override async Task OnInitializedAsync()
    {
        var state = await AuthProvider.GetAuthenticationStateAsync();
        if (state.User.Identity?.IsAuthenticated == true)
        {
            Navigation.NavigateTo("/");
        }
    }

    private async Task HandleLogin()
    {
        var dto = new Client.Wasm.DTOs.LoginRequestDto
        {
            Email = loginModel.Email,
            Password = loginModel.Password
        };
        var success = await AuthService.LoginAsync(dto);
        if (success)
            Navigation.NavigateTo("/");
    }

    class LoginModel
    {
        [Required]
        public string Email { get; set; }
        [Required]
        public string Password { get; set; }
    }
}
