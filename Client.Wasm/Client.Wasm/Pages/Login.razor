@page "/login"
@layout LoginLayout
@inject Client.Wasm.Services.AuthService AuthService
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthProvider

<MudCard Class="pa-6" Style="width: 400px; box-shadow: 0 0 15px rgba(0,0,0,0.1);">
    <MudText Typo="Typo.h5" Class="mb-4">–í—Ö–æ–¥</MudText>

    <EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <MudTextField Label="Email"
                      @bind-Value="loginModel.Email"
                      For="@(() => loginModel.Email)"
                      Required="true"
                      RequiredError="–í–≤–µ–¥–∏—Ç–µ email"
                      Class="mb-3" />

        <MudTextField Label="–ü–∞—Ä–æ–ª—å"
                      InputType="InputType.Password"
                      @bind-Value="loginModel.Password"
                      For="@(() => loginModel.Password)"
                      Required="true"
                      RequiredError="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å"
                      Class="mb-3" />

        <MudButton Type="Submit" Variant="Variant.Filled" Color="Color.Primary" FullWidth="true">
            –í–æ–π—Ç–∏
        </MudButton>
    </EditForm>
</MudCard>

@code {
    LoginModel loginModel = new();

    private async Task HandleLogin()
    {
        Console.WriteLine("HandleLogin called"); // üîç –≤—Ä–µ–º–µ–Ω–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞

        var dto = new Client.Wasm.DTOs.LoginRequestDto
        {
            Email = loginModel.Email,
            Password = loginModel.Password
        };

        var success = await AuthService.LoginAsync(dto);
        if (success)
            Navigation.NavigateTo("/");
    }

    class LoginModel
    {
        [Required(ErrorMessage = "Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω")]
        public string Email { get; set; }

        [Required(ErrorMessage = "–ü–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω")]
        public string Password { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        var state = await AuthProvider.GetAuthenticationStateAsync();
        if (state.User.Identity?.IsAuthenticated == true)
            Navigation.NavigateTo("/");
    }
}
