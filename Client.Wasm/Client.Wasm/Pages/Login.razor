@page "/login"
@layout LoginLayout
@inject Client.Wasm.Services.IAuthService AuthService
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthProvider

<MudCard Class="login-card pa-6" Style="width: 400px; height:300px;">
    <MudText Typo="Typo.h5"  Class="mb-4">Вход</MudText>

<EditForm Model="@loginModel">
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <MudText Color="Color.Error" Class="mb-2">@errorMessage</MudText>
        }

        <MudTextField @bind-Value="loginModel.Email"Label="Email" For="@(() => loginModel.Email)" />
        <MudTextField @bind-Value="loginModel.Password" Label="Пароль" InputType="InputType.Password" For="@(() => loginModel.Password)" />

        <MudButton Variant="Variant.Filled" Color="Color.Primary" Type="Button" FullWidth="true" OnClick="HandleLogin">
            Войти
        </MudButton>
    </EditForm>
</MudCard>

@code {
    LoginModel loginModel = new();
    string? errorMessage;
    private async Task HandleLogin()
    {
        errorMessage = null;
        if (!Client.Wasm.Helpers.ManualValidator.TryValidate(loginModel, out var errors))
        {
            errorMessage = string.Join("\n", errors);
            return;
        }

        var dto = new Client.Wasm.DTOs.LoginRequestDto
        {
            Email = loginModel.Email,
            Password = loginModel.Password
        };

        var success = await AuthService.LoginAsync(dto);
        if (success)
            Navigation.NavigateTo("/");
    }

    class LoginModel
    {
        [Required(ErrorMessage = "Email обязателен")]
        public string Email { get; set; }

        [Required(ErrorMessage = "Пароль обязателен")]
        public string Password { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        var state = await AuthProvider.GetAuthenticationStateAsync();
        if (state.User.Identity?.IsAuthenticated == true)
            Navigation.NavigateTo("/");
    }
    // дополнительная обработка по кнопке не требуется
}
