@attribute [Authorize(Roles="Администратор,Канцелярия,Начальник управления")]
@using Client.Wasm.DTOs
@inject INumberTemplateApiClient ApiClient

<MudDialog @bind-Visible="open" MaxWidth="MaxWidth.Small">
    <DialogContent>
        <MudDialogTitle>@header</MudDialogTitle>
        <EditForm Model="model" OnValidSubmit="Save">
            <DataAnnotationsValidator />
            <div class="mb-3">
                <MudTextField @bind-Value="model.Name" Label="Название" Class="w-100" />
            </div>
            <div class="mb-3">
                <MudTextField @bind-Value="model.TargetType" Label="Тип" Class="w-100" />
            </div>
            <div class="mb-3">
                <MudTextField @bind-Value="model.TemplateText" Label="Шаблон" Class="w-100" />
            </div>
            <div class="mb-3">
                <MudSelect T="ResetPolicy" @bind-Value="model.ResetPolicy" Label="Политика сброса" Class="w-100">
                    @foreach (var option in resetOptions)
                    {
                        <MudSelectItem Value="@option">@option</MudSelectItem>
                    }
                </MudSelect>
            </div>
            <div class="text-right mt-3">
                <MudButton Type="Submit" Color="Color.Primary" Class="me-2">Сохранить</MudButton>
                <MudButton Variant="Variant.Text" OnClick="Hide">Отмена</MudButton>
            </div>
        </EditForm>
    </DialogContent>
</MudDialog>

@code {
    bool open;
    string header = string.Empty;
    bool isNew;
    NumberTemplateDto model = new();
    ResetPolicy[] resetOptions = Enum.GetValues<ResetPolicy>();

    public void Show()
    {
        model = new NumberTemplateDto();
        header = "Новый шаблон";
        isNew = true;
        open = true;
    }

    public async void Load(int id)
    {
        var t = await ApiClient.GetByIdAsync(id);
        if (t != null) model = t;
        header = $"Редактировать {t?.Name}";
        isNew = false;
        open = true;
    }

    void Hide() => open = false;

    async Task Save()
    {
        if (isNew)
            await ApiClient.CreateAsync(new CreateNumberTemplateDto { Name = model.Name, TargetType = model.TargetType, TemplateText = model.TemplateText, ResetPolicy = model.ResetPolicy });
        else
            await ApiClient.UpdateAsync(model.Id, new UpdateNumberTemplateDto { Name = model.Name, TargetType = model.TargetType, TemplateText = model.TemplateText, ResetPolicy = model.ResetPolicy });
        open = false;
        if (OnSaved.HasDelegate) await OnSaved.InvokeAsync();
    }

    [Parameter] public EventCallback OnSaved { get; set; }
}
