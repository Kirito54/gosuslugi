@attribute [Authorize]
@using Client.Wasm.DTOs
@using Client.Wasm.Services
@inject IJSRuntime Js
@inject NavigationManager NavigationManager
@inject IWorkflowApiClient ApiClient

<MudDialog @bind-Visible="open" MaxWidth="MaxWidth.Small" DisableBackdropClick="true">
    <DialogContent>
        <MudText Typo="Typo.h6" Class="mb-2">@hdr</MudText>
        <EditForm Model="model">
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <MudText Color="Color.Error" Class="mb-2">@errorMessage</MudText>
            }
            <MudTabs>
                <MudTabPanel Text="Основное">
                    <MudTextField @bind-Value="model.Name" Label="Название" Class="mb-3 w-100" />
                    <MudTextField @bind-Value="model.Description" Label="Описание" Class="mb-3 w-100" Lines="4" />
                </MudTabPanel>
                <MudTabPanel Text="Дополнительно">
                    <!-- дополнительные поля -->
                </MudTabPanel>
            </MudTabs>
            <div class="text-right mt-3">
                <MudButton Type="Button" Color="Color.Primary" Class="me-2" OnClick="Save">Сохранить</MudButton>
                <MudButton Variant="Variant.Text" OnClick="Hide">Отмена</MudButton>
            </div>
        </EditForm>
    </DialogContent>
</MudDialog>

@code {
    bool open;
    WorkflowDto model = new();
    string hdr;
    bool isNew;
    string? errorMessage;

    public void Show()
    {
        model = new WorkflowDto();
        hdr = "Новый маршрут";
        isNew = true;
        open = true;
    }

    public async void Load(int id)
    {
        model = await ApiClient.GetByIdAsync(id);
        hdr = $"Редактировать маршрут #{id}";
        isNew = false;
        open = true;
    }

    async Task Save()
    {
        errorMessage = null;
        if (!Client.Wasm.Helpers.ManualValidator.TryValidate(model, out var errors))
        {
            errorMessage = string.Join("\n", errors);
            return;
        }
        if (isNew)
            await ApiClient.CreateAsync(model);
        else
            await ApiClient.UpdateAsync(model);
        Hide();
        if (OnSaved.HasDelegate)
        {
            await OnSaved.InvokeAsync();
        }
    }

    void Hide() => open = false;

    [Parameter] public EventCallback OnSaved { get; set; }
}
