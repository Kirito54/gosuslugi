@attribute [Authorize]
@using Client.Wasm.DTOs
@using Client.Wasm.Services
@using Client.Wasm.Components
@using System.Linq
@inject IJSRuntime Js
@inject NavigationManager NavigationManager
@inject IWorkflowApiClient ApiClient

<MudDialog @bind-Visible="open" MaxWidth="MaxWidth.Small" DisableBackdropClick="true">
    <DialogContent>
        <MudText Typo="Typo.h6" Class="mb-2">@hdr</MudText>
        <EditForm Model="model">
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <MudText Color="Color.Error" Class="mb-2">@errorMessage</MudText>
            }
            <MudTabs>
                <MudTabPanel Text="Основное">
                    <MudTextField @bind-Value="model.Name" Label="Название" Class="mb-3 w-100" />
                    <MudTextField @bind-Value="model.Description" Label="Описание" Class="mb-3 w-100" Lines="4" />
                </MudTabPanel>
                <MudTabPanel Text="Шаги">
                    <MudButton Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" OnClick="ShowAddStep" Class="mb-2">Добавить шаг</MudButton>
                    <MudTable Items="@steps" Hover="true" Dense="true">
                        <HeaderContent>
                            <MudTh>Порядок</MudTh>
                            <MudTh>Название</MudTh>
                            <MudTh></MudTh>
                        </HeaderContent>
                        <RowTemplate Context="step">
                            <MudTd DataLabel="Порядок">@step.Sequence</MudTd>
                            <MudTd DataLabel="Название">@step.Name</MudTd>
                            <MudTd>
                                <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="@(()=>DeleteStep(step.Id))" />
                            </MudTd>
                        </RowTemplate>
                    </MudTable>
                </MudTabPanel>
                <MudTabPanel Text="Переходы">
                    <MudButton Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" OnClick="ShowAddTransition" Class="mb-2">Добавить переход</MudButton>
                    <MudTable Items="@transitions" Hover="true" Dense="true">
                        <HeaderContent>
                            <MudTh>От</MudTh>
                            <MudTh>К</MudTh>
                            <MudTh>Условие</MudTh>
                            <MudTh></MudTh>
                        </HeaderContent>
                        <RowTemplate Context="tr">
                            <MudTd DataLabel="От">@GetStepName(tr.FromStepId)</MudTd>
                            <MudTd DataLabel="К">@GetStepName(tr.ToStepId)</MudTd>
                            <MudTd DataLabel="Условие">@tr.ConditionExpression</MudTd>
                            <MudTd>
                                <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="@(()=>DeleteTransition(tr.Id))" />
                            </MudTd>
                        </RowTemplate>
                    </MudTable>
                </MudTabPanel>
            </MudTabs>
            <div class="text-right mt-3">
                <MudButton Type="Button" Color="Color.Primary" Class="me-2" OnClick="Save">Сохранить</MudButton>
                <MudButton Variant="Variant.Text" OnClick="Hide">Отмена</MudButton>
            </div>
        </EditForm>
    </DialogContent>
</MudDialog>
<WorkflowStepEdit Model="stepModel" Visible="@showStepDialog" Title="Новый шаг" OnSave="OnStepSaved" OnCancel="@(()=>showStepDialog=false)" />
<WorkflowTransitionEdit Model="transitionModel" Steps="steps" Visible="@showTransitionDialog" Title="Новый переход" OnSave="OnTransitionSaved" OnCancel="@(()=>showTransitionDialog=false)" />

@code {
    bool open;
    WorkflowDto model = new();
    string hdr;
    bool isNew;
    string? errorMessage;
    List<WorkflowStepDto> steps = new();
    List<WorkflowTransitionDto> transitions = new();
    bool showStepDialog;
    WorkflowStepDto stepModel = new();
    bool showTransitionDialog;
    WorkflowTransitionDto transitionModel = new();

    public void Show()
    {
        model = new WorkflowDto();
        hdr = "Новый маршрут";
        isNew = true;
        open = true;
        steps = new();
        transitions = new();
    }

    public async void Load(int id)
    {
        model = await ApiClient.GetByIdAsync(id);
        hdr = $"Редактировать маршрут #{id}";
        isNew = false;
        open = true;
        steps = await ApiClient.GetStepsAsync(id);
        transitions = await ApiClient.GetTransitionsAsync(id);
    }

    async Task Save()
    {
        errorMessage = null;
        if (!Client.Wasm.Helpers.ManualValidator.TryValidate(model, out var errors))
        {
            errorMessage = string.Join("\n", errors);
            return;
        }
        if (isNew)
            await ApiClient.CreateAsync(model);
        else
            await ApiClient.UpdateAsync(model);
        foreach (var s in steps)
        {
            if (s.Id == 0)
                await ApiClient.CreateStepAsync(s);
            else
                await ApiClient.UpdateStepAsync(s);
        }
        foreach (var t in transitions)
        {
            if (t.Id == 0)
                await ApiClient.CreateTransitionAsync(t);
            else
                await ApiClient.UpdateTransitionAsync(t);
        }
        Hide();
        if (OnSaved.HasDelegate)
        {
            await OnSaved.InvokeAsync();
        }
    }

    void Hide() => open = false;

    void ShowAddStep()
    {
        stepModel = new WorkflowStepDto { WorkflowId = model.Id, Sequence = steps.Count + 1 };
        showStepDialog = true;
    }

    void ShowAddTransition()
    {
        transitionModel = new WorkflowTransitionDto();
        showTransitionDialog = true;
    }

    async Task OnStepSaved(WorkflowStepDto dto)
    {
        if (dto.Id == 0)
            steps.Add(dto);
        showStepDialog = false;
    }

    async Task OnTransitionSaved(WorkflowTransitionDto dto)
    {
        if (dto.Id == 0)
            transitions.Add(dto);
        showTransitionDialog = false;
    }

    void DeleteStep(int id) => steps.RemoveAll(s => s.Id == id);
    void DeleteTransition(int id) => transitions.RemoveAll(t => t.Id == id);

    string GetStepName(int id) => steps.FirstOrDefault(s => s.Id == id)?.Name ?? "";

    [Parameter] public EventCallback OnSaved { get; set; }
}
