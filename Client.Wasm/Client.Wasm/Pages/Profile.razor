@attribute [Authorize]
@page "/profile"

@using Client.Wasm.DTOs
@inject IJSRuntime Js
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
<div class="container p-4">
    <MudCard Class="mb-4">
        <MudCardHeader>
            <MudText Typo="Typo.h5">Профиль</MudText>
        </MudCardHeader>
        <MudCardContent>
            <EditForm Model="model">
                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <MudText Color="Color.Error" Class="mb-2">@errorMessage</MudText>
                }
                <MudTextField @bind-Value="model.FullName" Placeholder="ФИО" Class="mb-3 w-100" />
                <MudTextField @bind-Value="model.Email" Placeholder="Email" Class="mb-3 w-100" />
                <MudButton Type="Button" Color="Color.Primary" OnClick="OnSave">Сохранить</MudButton>
            </EditForm>
        </MudCardContent>
    </MudCard>
</div>

@code {
    ProfileModel model = new();
    string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        var saved = await LocalStorage.GetItemAsync<ProfileModel>("userProfile");
        if (saved != null)
        {
            model = saved;
        }
    }

    async Task OnSave()
    {
        errorMessage = null;
        if (!Client.Wasm.Helpers.ManualValidator.TryValidate(model, out var errors))
        {
            errorMessage = string.Join("\n", errors);
            return;
        }
        await LocalStorage.SetItemAsync("userProfile", model);
        Snackbar.Add("Профиль сохранён", Severity.Success);
    }

    class ProfileModel
    {
        [Required]
        public string FullName { get; set; } = string.Empty;
        [Required, EmailAddress]
        public string Email { get; set; } = string.Empty;
    }
}
