@attribute [Authorize(Roles="Administrator")]
@using Client.Wasm.DTOs
@using Client.Wasm.Helpers
@inject IServiceTemplateApiClient ApiClient

<MudDialog @bind-Visible="open" MaxWidth="MaxWidth.Medium">
    <DialogContent>
        <MudText Typo="Typo.h6" Class="mb-2">@header</MudText>
        <EditForm Model="model" OnValidSubmit="SaveTemplate">
            <DataAnnotationsValidator />
        <MudTabs>
            <MudTabPanel Text="Поля">
                <MudTable Items="@config.Fields">
                    <HeaderContent>
                        <MudTh>Название</MudTh>
                        <MudTh>Тип</MudTh>
                        <MudTh>Обяз.</MudTh>
                        <MudTh Class="text-center"></MudTh>
                    </HeaderContent>
                    <RowTemplate Context="row">
                        <MudTd DataLabel="Название">@row.Name</MudTd>
                        <MudTd DataLabel="Тип">@row.Type</MudTd>
                        <MudTd DataLabel="Обяз.">
                            <MudCheckBox T="bool" @bind-Checked="row.Required" Disabled="true" />
                        </MudTd>
                        <MudTd Class="text-center">
                            <MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="@(()=> RemoveField(row))" />
                        </MudTd>
                    </RowTemplate>
                </MudTable>
                <div class="mt-2">
                    <MudButton Color="Color.Primary" OnClick="AddField">Добавить поле</MudButton>
                </div>
            </MudTabPanel>
            <MudTabPanel Text="Документы">
                <MudTable Items="@config.Documents">
                    <HeaderContent>
                        <MudTh>Название</MudTh>
                        <MudTh>Обяз.</MudTh>
                        <MudTh Class="text-center"></MudTh>
                    </HeaderContent>
                    <RowTemplate Context="row">
                        <MudTd DataLabel="Название">@row.Name</MudTd>
                        <MudTd DataLabel="Обяз.">
                            <MudCheckBox T="bool" @bind-Checked="row.Required" Disabled="true" />
                        </MudTd>
                        <MudTd Class="text-center">
                            <MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="@(()=> RemoveDocument(row))" />
                        </MudTd>
                    </RowTemplate>
                </MudTable>
                <div class="mt-2">
                    <MudButton Color="Color.Primary" OnClick="AddDocument">Добавить документ</MudButton>
                </div>
            </MudTabPanel>
            <MudTabPanel Text="Категории">
                <div class="p-3">
                    @foreach(var cat in categories)
                    {
                        <MudCheckBox T="bool" Label="@cat" Checked="CategoryChecked(cat)" CheckedChanged="val => ToggleCategory(cat, val)" Class="mb-2" />
                    }
                </div>
            </MudTabPanel>
            <MudTabPanel Text="Workflow">
                <MudTable Items="@config.Workflow">
                    <HeaderContent>
                        <MudTh>Этап</MudTh>
                        <MudTh>Роль</MudTh>
                        <MudTh>Порядок</MudTh>
                        <MudTh Class="text-center"></MudTh>
                    </HeaderContent>
                    <RowTemplate Context="row">
                        <MudTd DataLabel="Этап">@row.Name</MudTd>
                        <MudTd DataLabel="Роль">@row.Role</MudTd>
                        <MudTd DataLabel="Порядок">@row.Order</MudTd>
                        <MudTd Class="text-center">
                            <MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="@(()=> RemoveStep(row))" />
                        </MudTd>
                    </RowTemplate>
                </MudTable>
                <div class="mt-2">
                    <MudButton Color="Color.Primary" OnClick="AddStep">Добавить этап</MudButton>
                </div>
            </MudTabPanel>
            <MudTabPanel Text="Превью">
                <div class="p-3">
                    @foreach(var f in config.Fields.OrderBy(f => f.Order))
                    {
                        <div class="mb-3">
                            <label>@f.Name</label>
                            @if(f.Type == "text")
                            {
                                <MudTextField T="string" Class="w-100" Placeholder="@f.Name" />
                            }
                            else if(f.Type == "date")
                            {
                                <MudDatePicker Date="@DateTime.Now" Class="w-100" />
                            }
                            else if(f.Type == "checkbox")
                            {
                                <MudCheckBox T="bool" Label="@f.Name" />
                            }
                        </div>
                    }
                </div>
            </MudTabPanel>
        </MudTabs>
        <div class="text-right mt-3">
            <MudButton Type="Submit" Color="Color.Primary" Class="me-2">Сохранить</MudButton>
            <MudButton Variant="Variant.Text" OnClick="Hide">Отмена</MudButton>
        </div>
    </EditForm>
    </DialogContent>
</MudDialog>

@code {
    bool open;
    ServiceTemplateDto model = new();
    ServiceTemplateConfig config = new();
    string header = string.Empty;
    bool isNew;
    string[] categories = new[]{"Физ. лицо","Представитель","Организация"};

    public void Show(int serviceId)
    {
        model = new ServiceTemplateDto{ServiceId = serviceId, IsActive = true};
        config = new ServiceTemplateConfig();
        header = "Новый шаблон";
        isNew = true;
        open = true;
    }

    public async void Load(int id)
    {
        var t = await ApiClient.GetByIdAsync(id);
        if(t != null)
        {
            model = t;
            config = ServiceTemplateConfig.FromJson(t.JsonConfig);
        }
        header = $"Редактировать {t?.ServiceName}";
        isNew = false;
        open = true;
    }

    Task Hide() { open = false; return Task.CompletedTask; }

    async Task SaveTemplate()
    {
        model.JsonConfig = config.ToJson();
        if(isNew)
            await ApiClient.CreateAsync(new CreateServiceTemplateDto{ ServiceId = model.ServiceId, JsonConfig = model.JsonConfig, IsActive = model.IsActive });
        else
            await ApiClient.UpdateAsync(model.Id, new UpdateServiceTemplateDto{ JsonConfig = model.JsonConfig, IsActive = model.IsActive });
        open = false;
        if(OnSaved.HasDelegate) await OnSaved.InvokeAsync();
    }

    void AddField() => config.Fields.Add(new FieldConfig());
    void RemoveField(FieldConfig f) => config.Fields.Remove(f);
    void AddDocument() => config.Documents.Add(new DocumentConfig());
    void RemoveDocument(DocumentConfig d) => config.Documents.Remove(d);
    void AddStep() => config.Workflow.Add(new WorkflowStepConfig());
    void RemoveStep(WorkflowStepConfig s) => config.Workflow.Remove(s);

    bool CategoryChecked(string cat) => config.ApplicantCategories.Contains(cat);
    void ToggleCategory(string cat, bool val)
    {
        if(val){ if(!config.ApplicantCategories.Contains(cat)) config.ApplicantCategories.Add(cat); }
        else { config.ApplicantCategories.Remove(cat); }
    }

    [Parameter] public EventCallback OnSaved { get; set; }
}
