@attribute [Authorize]
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Navigations
@using Client.Wasm.DTOs
@inject IJSRuntime Js
@inject NavigationManager NavigationManager
@inject IUserApiClient ApiClient

<SfDialog @ref="dlg" Width="450px" ShowCloseIcon="true" Header="@hdr">
    <EditForm Model="model" OnValidSubmit="Save">
        <DataAnnotationsValidator />
        <SfTab>
            <TabItems>
                <TabItem>
    <ChildContent>
        <TabHeader Text="Основное"></TabHeader>
    </ChildContent>
    <ContentTemplate>
                    <SfTextBox TValue="string" @bind-Value="model.Email" Placeholder="Email" CssClass="mb-3 w-100" />
                    <SfTextBox TValue="string" @bind-Value="model.FullName" Placeholder="ФИО" CssClass="mb-3 w-100" />
                    <SfNumericTextBox TValue="int" @bind-Value="model.DepartmentId" Placeholder="ID отдела" CssClass="mb-3 w-100" />
                    <SfTextBox TValue="string" @bind-Value="roles" Placeholder="Роли (через запятую)" CssClass="mb-3 w-100" />
                </ContentTemplate>
</TabItem>
                <TabItem>
    <ChildContent>
        <TabHeader Text="Дополнительно"></TabHeader>
    </ChildContent>
    <ContentTemplate>
                    <!-- дополнительные поля -->
                </ContentTemplate>
</TabItem>
            </TabItems>
        </SfTab>
        <div class="text-right mt-3">
            <SfButton Type="Submit" CssClass="e-primary me-2">Сохранить</SfButton>
            <SfButton CssClass="e-flat" OnClick="@( (MouseEventArgs e) => dlg.HideAsync() )">Отмена</SfButton>
        </div>
    </EditForm>
</SfDialog>

@code {
    SfDialog dlg;
    CreateUserDto model = new();
    bool isNew;
    string hdr;
    string id = string.Empty;
    string roles = string.Empty;

    public void Show(CreateUserDto dto)
    {
        model = new CreateUserDto { RoleIds = new List<string>() };
        hdr = "Новый пользователь";
        isNew = true;
        _ = dlg.ShowAsync();
    }

    public async void Load(string userId)
    {
        var u = await ApiClient.GetByIdAsync(userId);
        id = userId;
        roles = string.Join(',', u.Roles);
        model = new CreateUserDto { Email = u.Email, FullName = u.FullName, DepartmentId = 0, RoleIds = u.Roles };
        hdr = "Редактировать пользователя";
        isNew = false;
        _ = dlg.ShowAsync();
    }

    async Task Save()
    {
        var list = roles.Split(',', StringSplitOptions.RemoveEmptyEntries).Select(r => r.Trim()).ToList();
        if (isNew)
        {
            model.RoleIds = list;
            await ApiClient.CreateAsync(model);
        }
        else
        {
            await ApiClient.UpdateAsync(id, new UpdateUserDto { FullName = model.FullName, DepartmentId = model.DepartmentId, RoleIds = list });
        }
        _ = dlg.HideAsync();
        if (OnSaved.HasDelegate)
        {
            await OnSaved.InvokeAsync();
        }
    }

    [Parameter] public EventCallback OnSaved { get; set; }
}
