@attribute [Authorize]
@using Client.Wasm.DTOs
@inject IJSRuntime Js
@inject NavigationManager NavigationManager
@inject IUserApiClient ApiClient

<MudDialog @bind-Visible="open" MaxWidth="MaxWidth.Small">
    <DialogContent>
        <MudText Typo="Typo.h6" Class="mb-2">@hdr</MudText>
        <EditForm Model="model" OnValidSubmit="Save">
            <DataAnnotationsValidator />
            <MudTabs>
                <MudTabPanel Text="Основное">
                    <MudTextField @bind-Value="model.Email" Label="Email" Class="mb-3 w-100" />
                    <MudTextField @bind-Value="model.FullName" Label="ФИО" Class="mb-3 w-100" />
                    <MudNumericField T="int" @bind-Value="model.DepartmentId" Label="ID отдела" Class="mb-3 w-100" />
                    <MudTextField @bind-Value="roles" Label="Роли (через запятую)" Class="mb-3 w-100" />
                </MudTabPanel>
                <MudTabPanel Text="Дополнительно">
                    <!-- дополнительные поля -->
                </MudTabPanel>
            </MudTabs>
            <div class="text-right mt-3">
                <MudButton Type="Submit" Color="Color.Primary" Class="me-2">Сохранить</MudButton>
                <MudButton Variant="Variant.Text" OnClick="Hide">Отмена</MudButton>
            </div>
        </EditForm>
    </DialogContent>
</MudDialog>

@code {
    bool open;
    CreateUserDto model = new();
    bool isNew;
    string hdr;
    string id = string.Empty;
    string roles = string.Empty;

    public void Show(CreateUserDto dto)
    {
        model = new CreateUserDto { RoleIds = new List<string>() };
        hdr = "Новый пользователь";
        isNew = true;
        open = true;
    }

    public async void Load(string userId)
    {
        var u = await ApiClient.GetByIdAsync(userId);
        id = userId;
        roles = string.Join(',', u.Roles);
        model = new CreateUserDto { Email = u.Email, FullName = u.FullName, DepartmentId = 0, RoleIds = u.Roles };
        hdr = "Редактировать пользователя";
        isNew = false;
        open = true;
    }

    async Task Save()
    {
        var list = roles.Split(',', StringSplitOptions.RemoveEmptyEntries).Select(r => r.Trim()).ToList();
        if (isNew)
        {
            model.RoleIds = list;
            await ApiClient.CreateAsync(model);
        }
        else
        {
            await ApiClient.UpdateAsync(id, new UpdateUserDto { FullName = model.FullName, DepartmentId = model.DepartmentId, RoleIds = list });
        }
        Hide();
        if (OnSaved.HasDelegate)
        {
            await OnSaved.InvokeAsync();
        }
    }

    void Hide() => open = false;

    [Parameter] public EventCallback OnSaved { get; set; }
}
