@attribute [Authorize]
@using Client.Wasm.DTOs
@using System.Linq
@inject IJSRuntime Js
@inject NavigationManager NavigationManager
@inject IUserApiClient ApiClient
@inject IPositionApiClient PositionApi
@inject IPermissionGroupApiClient GroupApi
@inject IDepartmentApiClient DepartmentApi

<MudDialog @bind-Visible="open" MaxWidth="MaxWidth.Small">
    <DialogContent>
        <MudText Typo="Typo.h6" Class="mb-2">@hdr</MudText>
        <EditForm Model="model">
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <MudText Color="Color.Error" Class="mb-2">@errorMessage</MudText>
            }
            <MudTabs>
                <MudTabPanel Text="Основное">
                    <MudTextField @bind-Value="model.Email" Label="Email" Class="mb-3 w-100" />
                    <MudTextField @bind-Value="model.LastName" Label="Фамилия" Class="mb-3 w-100" />
                    <MudTextField @bind-Value="model.FirstName" Label="Имя" Class="mb-3 w-100" />
                    <MudTextField @bind-Value="model.MiddleName" Label="Отчество" Class="mb-3 w-100" />
                    <MudSelect T="int" Label="Отдел" @bind-Value="model.DepartmentId" Class="mb-3 w-100">
                        @foreach (var d in departments)
                        {
                            <MudSelectItem Value="@d.Id">@d.Name</MudSelectItem>
                        }
                    </MudSelect>
                    <MudSelect T="int" Label="Должность" @bind-Value="model.PositionId" Class="mb-3 w-100">
                        @foreach (var p in positions)
                        {
                            <MudSelectItem Value="@p.Id">@p.Name</MudSelectItem>
                        }
                    </MudSelect>
                    <MudSelect T="string" Label="Роли" SelectedValues="@model.RoleIds" SelectedValuesChanged="@(values => OnRolesChanged(values))" MultiSelection="true" Class="mb-3 w-100">
                        @foreach (var r in allRoles)
                        {
                            <MudSelectItem Value="@r">@r</MudSelectItem>
                        }
                    </MudSelect>
                    <MudSelect T="int" Label="Группы прав" SelectedValues="@model.GroupIds" SelectedValuesChanged="@(values => OnGroupsChanged(values))" MultiSelection="true" Class="mb-3 w-100">
                        @foreach (var g in groups)
                        {
                            <MudSelectItem Value="@g.Id">@g.Name</MudSelectItem>
                        }
                    </MudSelect>
                </MudTabPanel>
            </MudTabs>
            <div class="text-right mt-3">
                <MudButton Type="Button" Color="Color.Primary" Class="me-2" OnClick="Save">Сохранить</MudButton>
                <MudButton Variant="Variant.Text" OnClick="Hide">Отмена</MudButton>
            </div>
        </EditForm>
    </DialogContent>
</MudDialog>

@code {
    bool open;
    CreateUserDto model = new();
    bool isNew;
    string hdr = string.Empty;
    string id = string.Empty;
    string? errorMessage;
    List<PositionDto> positions = new();
    List<DepartmentDto> departments = new();
    List<PermissionGroupDto> groups = new();
    List<string> allRoles = new();

    public async void Show(CreateUserDto dto)
    {
        await LoadDictionaries();
        model = new CreateUserDto { RoleIds = new HashSet<string>(), GroupIds = new HashSet<int>() };
        hdr = "Новый пользователь";
        isNew = true;
        open = true;
    }

    public async void Load(string userId)
    {
        await LoadDictionaries();
        var u = await ApiClient.GetByIdAsync(userId);
        id = userId;
        model = new CreateUserDto
        {
            Email = u!.Email,
            LastName = string.Empty,
            FirstName = string.Empty,
            MiddleName = string.Empty,
            DepartmentId = 0,
            PositionId = 0,
            RoleIds = u.Roles.ToHashSet(),
            GroupIds = new HashSet<int>()
        };
        hdr = "Редактировать пользователя";
        isNew = false;
        open = true;
    }

    async Task LoadDictionaries()
    {
        positions = await PositionApi.GetAllAsync();
        departments = await DepartmentApi.GetAllAsync();
        groups = await GroupApi.GetAllAsync();
        allRoles = groups.SelectMany(g => g.Permissions).Distinct().ToList();
    }

    async Task Save()
    {
        errorMessage = null;
        if (!Client.Wasm.Helpers.ManualValidator.TryValidate(model, out var errors))
        {
            errorMessage = string.Join("\n", errors);
            return;
        }
        if (isNew)
        {
            await ApiClient.CreateAsync(model);
        }
        else
        {
            await ApiClient.UpdateAsync(id, new UpdateUserDto
            {
                LastName = model.LastName,
                FirstName = model.FirstName,
                MiddleName = model.MiddleName,
                DepartmentId = model.DepartmentId,
                PositionId = model.PositionId,
                RoleIds = model.RoleIds,
                GroupIds = model.GroupIds
            });
        }
        Hide();
        if (OnSaved.HasDelegate)
        {
            await OnSaved.InvokeAsync();
        }
    }

    Task OnRolesChanged(IEnumerable<string> values)
    {
        model.RoleIds = values.ToHashSet();
        return Task.CompletedTask;
    }

    Task OnGroupsChanged(IEnumerable<int> values)
    {
        model.GroupIds = values.ToHashSet();
        return Task.CompletedTask;
    }

    void Hide() => open = false;

    [Parameter] public EventCallback OnSaved { get; set; }
}
