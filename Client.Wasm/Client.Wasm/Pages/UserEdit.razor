@using Client.Wasm.DTOs
@inject IUserApiClient ApiClient

<SfDialog @ref="dlg" Width="450px" ShowCloseIcon="true" Header="@hdr">
    <EditForm Model="model" OnValidSubmit="Save">
        <DataAnnotationsValidator />
        <SfTextBox TValue="string" @bind-Value="model.Email" Placeholder="Email" CssClass="mb-3 w-100" />
        <SfTextBox TValue="string" @bind-Value="model.FullName" Placeholder="ФИО" CssClass="mb-3 w-100" />
        <SfNumericTextBox TValue="int" @bind-Value="model.DepartmentId" Placeholder="ID отдела" CssClass="mb-3 w-100" />
        <SfTextBox TValue="string" @bind-Value="roles" Placeholder="Роли (через запятую)" CssClass="mb-3 w-100" />
        <div class="text-right">
            <SfButton Type="Submit" CssClass="e-primary me-2">Сохранить</SfButton>
            <SfButton CssClass="e-flat" OnClick="()=>dlg.Hide()">Отмена</SfButton>
        </div>
    </EditForm>
</SfDialog>

@code {
    SfDialog dlg;
    object model;
    CreateUserDto createModel = new();
    UpdateUserDto updateModel = new();
    bool isNew;
    string hdr;
    string id;
    string roles = string.Empty;

    public void Show(CreateUserDto dto)
    {
        createModel = new CreateUserDto { RoleIds = new List<string>() };
        model = createModel;
        hdr = "Новый пользователь";
        isNew = true;
        dlg.Show();
    }

    public async void Load(string userId)
    {
        var u = await ApiClient.GetByIdAsync(userId);
        id = userId;
        roles = string.Join(',', u.Roles);
        updateModel = new UpdateUserDto { FullName = u.FullName, DepartmentId = 0, RoleIds = u.Roles };
        model = updateModel;
        hdr = "Редактировать пользователя";
        isNew = false;
        dlg.Show();
    }

    async Task Save()
    {
        var list = roles.Split(',', StringSplitOptions.RemoveEmptyEntries).Select(r => r.Trim()).ToList();
        if (isNew)
        {
            createModel.RoleIds = list;
            await ApiClient.CreateAsync(createModel);
        }
        else
        {
            updateModel.RoleIds = list;
            await ApiClient.UpdateAsync(id, updateModel);
        }
        dlg.Hide();
        OnSaved?.Invoke();
    }

    [Parameter] public EventCallback OnSaved { get; set; }
}
