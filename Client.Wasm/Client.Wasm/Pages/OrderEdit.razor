@attribute [Authorize]
@using Client.Wasm.DTOs
@inject IJSRuntime Js
@inject NavigationManager NavigationManager

@if (visible)
{
    <SfDialog Width="450px" ShowCloseIcon="true" Header="@hdr" IsModal="true" Visible="true" CssClass="e-bootstrap5">
        <EditForm Model="model" OnValidSubmit="Save">
            <DataAnnotationsValidator />
            <SfTab CssClass="e-bootstrap5">
                <TabItems>
                    <TabItem>
    <ChildContent>
        <TabHeader Text="Основное"></TabHeader>
    </ChildContent>
    <ContentTemplate>
                        <SfTextBox @bind-Value="model.Number" Placeholder="Номер" CssClass="mb-3 w-100" />
                        <SfDatePicker @bind-Value="model.Date" CssClass="mb-3 w-100" />
                        <SfTextBox Multiline="true" @bind-Value="model.Text" Placeholder="Текст" CssClass="mb-3 w-100" Rows="3" />
                    </ContentTemplate>
</TabItem>
                </TabItems>
            </SfTab>
            <div class="text-right mt-3">
                <SfButton Type="Submit" CssClass="e-primary me-2">Сохранить</SfButton>
                <SfButton CssClass="e-flat" OnClick="Hide">Отмена</SfButton>
            </div>
        </EditForm>
    </SfDialog>
}

@code {
    bool visible;
    OrderDto model = new();
    string hdr = string.Empty;

    public void Show(OrderDto dto)
    {
        model = new OrderDto();
        hdr = "Новый приказ";
        visible = true;
    }

    public void Load(int id)
    {
        hdr = $"Редактировать приказ #{id}";
        visible = true;
    }

    void Hide() => visible = false;

    async Task Save()
    {
        visible = false;
        if (OnSaved.HasDelegate)
        {
            await OnSaved.InvokeAsync();
        }
    }

    [Parameter] public EventCallback OnSaved { get; set; }
}
