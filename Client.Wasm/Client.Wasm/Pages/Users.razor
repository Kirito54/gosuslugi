@attribute [Authorize]
@page "/users"
@inject IUserApiClient ApiClient
@using Client.Wasm.DTOs
@inject IJSRuntime Js
@inject NavigationManager NavigationManager

<MudContainer MaxWidth="MaxWidth.False" Class="p-4">
    <MudCard Class="mb-4">
        <MudCardHeader>
            <MudText Typo="Typo.h5">Пользователи</MudText>
        </MudCardHeader>
        <MudCardContent>
            <MudButton Color="Color.Primary" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" Class="mb-3" OnClick="@(()=> edit.Show(new CreateUserDto()))">Добавить пользователя</MudButton>
            <MudTable Items="@items" Hover="true" Dense="true">
                <HeaderContent>
                    <MudTh>ID</MudTh>
                    <MudTh>Email</MudTh>
                    <MudTh>ФИО</MudTh>
                    <MudTh>Роли</MudTh>
                    <MudTh Class="text-center">Действия</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="ID">@context.Id</MudTd>
                    <MudTd DataLabel="Email">@context.Email</MudTd>
                    <MudTd DataLabel="ФИО">@context.FullName</MudTd>
                    <MudTd DataLabel="Роли">@string.Join(", ", context.Roles)</MudTd>
                    <MudTd Class="text-center" DataLabel="Действия">
                        <MudIconButton Icon="@Icons.Material.Filled.Edit" OnClick="@(()=> edit.Load(context.Id))" />
                        <MudIconButton Color="Color.Error" Icon="@Icons.Material.Filled.Delete" OnClick="@(()=> Delete(context.Id))" />
                    </MudTd>
                </RowTemplate>
            </MudTable>
        </MudCardContent>
    </MudCard>
    <UserEdit @ref="edit" OnSaved="LoadData" />
</MudContainer>

@code {
    List<UserDto> items = new();
    UserEdit edit;

    protected override async Task OnInitializedAsync() => await LoadData();
    async Task LoadData() => items = await ApiClient.GetAllAsync();
    async Task Delete(string id){ if(await Js.InvokeAsync<bool>("confirm", $"Удалить пользователя {id}?")){ await ApiClient.DeleteAsync(id); await LoadData(); } }
}
